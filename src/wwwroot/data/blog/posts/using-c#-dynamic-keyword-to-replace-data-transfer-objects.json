{"id":1,"title":"Using C# dynamic Keyword To Replace Data Transfer Objects","summary":"For this post I'm going to show 3 examples of using the C# dynamic keyword when deserializing input data instead of using data transfer objects. Many modern applications need to accept data from a variety of sources. Often times we create data transfer objects just to handle requests and responses to and from the data source. Using dynamic in C# reduces the need for data transfer objects and keeps the logic that depends on the 3rd party data source contained to one place.","body":"This is my blog post for the first <a href='https://crosscuttingconcerns.com/The-First-C-Advent-Calendar'>C# Advent Calendar</a>. Checkout the other great blog posts on the calendar as well. This is also my first blog post ever so it's a season of firsts! \r\n\tI also encourage you to leave feedback in the comments about what you liked and didn't like and helpful feedback I can use to improve future posts.\r\n\t<br />\r\n\t<br/>\r\n\tFor this post I'm going to show 3 examples of using the C# dynamic keyword when deserializing input data instead of using data transfer objects. This post assumes some C# knowledge and experience working with projects that deserialize data from different data sources so I'm going to skip the details to focus on the examples involving the dynamic keyword. The entire solution is available on <a href='https://github.com/cwl157/csharpDynamicExamples'>GitHub</a>.\r\n\t<br /><br />\r\n\tMany modern applications need to accept data from a variety of sources.\r\n\tOften times we create data transfer objects just to handle requests and responses to and from the data source. I have found when working on applications that consume 3rd party web APIs I could have a few dozen data transfer objects just to handle the requests and responses to and from the API.\r\n\tUsing dynamic in C# reduces the need for data transfer objects and keeps the logic that depends on the 3rd party data source contained to one place. This makes the overall code base smaller and easier to maintain. I have also found that many popular libraries that handle deserializing data have strongly typed methods and methods that support the dynamic keyword. I have 3 examples of using the dynamic keyword in this way. The first is processing a CSV file using <a href='https://joshclose.github.io/CsvHelper/'>CSV Helper</a> . The second is deserializing JSON using <a href='https://www.newtonsoft.com/json'>Newtonsoft Json.NET</a>.\r\n\tFinally, I'll show how to use dynamic as the parameter of a POST request in a web api project.\r\n\t<br />\r\n\t<br />\r\n\tFirst I'm going to show an example of parsing a CSV file using the <a href='https://joshclose.github.io/CsvHelper/'>CSV Helper</a> NuGet package. When using a data transfer object the code looks something like this. Read the file and parse it into a data transfer object.\r\n\t<pre>\r\n            using (StreamReader reader = File.OpenText(filePath))\r\n            {\r\n                CsvReader csv = new CsvReader(reader);\r\n                IEnumerable&lt;BookDto&gt; records = csv.GetRecords&lt;BookDto&gt;();\r\n                // Map records to application object...\r\n            }\r\n\t</pre>\r\n\tThe dynamic version is not much different but without the need for the data transfer object, using dynamic instead.\r\n\t<pre>\r\n\t    using (StreamReader reader = File.OpenText(filePath))\r\n            {\r\n                CsvReader csv = new CsvReader(reader);\r\n                IEnumerable&lt;dynamic&gt; records = csv.GetRecords&lt;dynamic&gt;();\r\n                // Map records to application object...\r\n            }\r\n\t</pre>\r\n\tThe properties of the dynamic object will also have the correct data type, so a string will be a string, an integer will be an integer, etc. This makes it possible to easily map from the dynamic type to a strongly typed application model.\r\n\t<br />\r\n\t<br />\r\n\tHere is an example of using <a href='https://www.newtonsoft.com/json'>Json.NET</a> to accomplish the same thing using JSON input. First the one using a data transfer object.\r\n\t<pre>\r\n\t string jsonData = File.ReadAllText(filePath);\r\n     List&lt;BookDto&gt; records = JsonConvert.DeserializeObject&lt;List&lt;BookDto&gt;&gt;(jsonData);\r\n\t</pre>\r\n\tThen using dynamic. There isn't much code change between the two.\r\n\t<pre>\r\n\tstring jsonData = File.ReadAllText(filePath);\r\n    List<dynamic> records = JsonConvert.DeserializeObject&lt;List&lt;dynamic&gt;&gt;(jsonData);\r\n\t</pre>\r\n\t<br />\r\n\tMy final example shows how dynamic can be used as a parameter type to accept arguments in a POST request in a web API project. This prevents the need for request models and can prevent overposting since the app code can explicitly deal with the properties it needs and not only rely on the automatic model binding.\r\n\t<pre>\r\n\tpublic void Post([FromBody]dynamic requestObject)\r\n        {\r\n            Book b = new Book();\r\n            b.Title = requestObject.title;\r\n            b.Author = requestObject.author;\r\n            Debug.WriteLine(\"Title = \" + b.Title);\r\n            Debug.WriteLine(\"Author = \" + b.Author);\r\n        }\r\n\t</pre>\r\n\t<br />\r\n\tIn conclusion, using the C# dynamic keyword can make a code base smaller, easier to maintain, and require less typing. Most libraries that support generic methods also support dynamic versions as well and I showed 3 common examples of that.\r\n\t<br />\r\n\t<br />\r\n\tThat concludes my first ever blog post! I hope someone found it useful or at least interesting. Please leave feedback in the comments on what you liked, what I can improve on, and suggestions for next time.\r\n\tAlso, be sure to check out the full code in the <a href='https://github.com/cwl157/csharpDynamicExamples'>GitHub Repository</a> to see complete examples.\r\n\t","author":"Carl Layton","publishedDate":"2017-12-10T06:00:00Z","friendlyUri":"using-c#-dynamic-keyword-to-replace-data-transfer-objects","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":"using-javascript-promises-for-application-logic-in-an-angularjs-service","nextPostTitle":"Using Javascript Promises for Application Logic in an AngularJS Service"}