{"id":4,"title":"AngularJS Route Resolve Failed Promise Example","summary":"In the <a href=\"/blog/post/angularjs-route-resolve-example\">previous post</a> I looked at how the resolve property of an AngularJS route can be used to pass dependencies to a controller. In that example the resolve property in the route configuration called a service that returned a promise. The resolve property then passes the result of the promise to the controller when it is instantiated. The question that came up is what if there is an error and the promise is rejected instead of resolved? That's what I'll be answering in this post.","body":"In the <a href=\"/blog/post/angularjs-route-resolve-example\">previous post</a> I looked at how the resolve property of an AngularJS route can be used to pass dependencies to a controller. In that example the resolve property in the route configuration called a service that returned a promise. The resolve property then passes the result of the promise to the controller when it is instantiated. The question that came up is what if there is an error and the promise is rejected instead of resolved? That's what I'll be answering in this post. The full example with a failed promise is in <a target=\"_blank\" href=\"https://plnkr.co/edit/DMjm6C\">this plunk.</a>\r\n<br /><br />\r\nThe route configuration from the previous post is below.\r\n<pre>\r\n<code class=\"language-javascript\">\r\n$routeProvider.when('/', {\r\n      templateUrl: 'greetingTemplate.html',\r\n      controller: 'greetingCtrl',\r\n      resolve: {\r\n        greeting: function(greetingService){\r\n            return greetingService.getGreeting();\r\n        }\r\n      }\r\n    });\r\n</code>\r\n</pre>\r\nSo what happens if the promise returned by grettingService.getGreeting() is rejected instead of resolved? I found that the route doesn't work and the page is never loaded. A call to the 'then' function needs to happen inside the route configuration as highlighted below.\r\n<pre>\r\n<code class=\"language-javascript\">\r\n$routeProvider.when('/', {\r\n      templateUrl: 'greetingTemplate.html',\r\n      controller: 'greetingCtrl',\r\n      resolve: {\r\n        greeting: function(greetingService){\r\n            return greetingService.getGreeting().then(function(success) {return success;}, function(failure){\r\n              console.log(\"Failed\");\r\n              return failure;\r\n            });\r\n        }\r\n      }\r\n    });\r\n</code>\r\n</pre>\r\nWhen the above is used the route will still resolve and print \"Failed\" to the console as well as inject the rejected promise data into the controller when it's instantiated. As you can see, it's possible to handle rejected promises but the route configuration needs to look for both resolved and rejected and explicitly return the result.","author":"Carl Layton","publishedDate":"2018-01-18T06:00:00Z","friendlyUri":"angularjs-route-resolve-failed-promise-example","isPublished":true,"previousPostUri":"angularjs-route-resolve-example","previousPostTitle":"AngularJS Route Resolve Example","nextPostUri":"create-fake-data-using-json-schema-faker","nextPostTitle":"Create Fake Data Using Json Schema Faker"}