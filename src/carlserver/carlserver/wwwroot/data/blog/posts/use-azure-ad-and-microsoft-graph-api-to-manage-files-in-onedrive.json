{"id":24,"title":"Use Azure AD and Microsoft Graph API to Manage Files in OneDrive","summary":"In this post, I describe how to authenticate to OneDrive using any Azure AD account or personal Microsoft account and upload and download files. At the end of this post, you will have an understanding of how to leverage Azure, Microsoft Identity, the Microsoft Graph API, and OneDrive for storage in your application. This post requires a Microsoft account and OneDrive subscription. The free one will work. It also requires an Azure subscription with permissions to modify Active Directory. I have not been charged yet with this example but Azure costs may apply depending on usage.","body":"In this post, I describe how to authenticate to OneDrive using any Azure AD account or personal Microsoft account and upload and download files. At the end of this post, you will have an understanding of how to leverage Azure, Microsoft Identity, the Microsoft Graph API, and OneDrive for storage in your application. This post requires a Microsoft account and OneDrive subscription. The free one will work. It also requires an Azure subscription with permissions to modify Active Directory. I have not been charged yet with this example but Azure costs may apply depending on usage. The example is a WPF application written in .NET Core 3.1 using Visual Studio 2019. The full example is available <a href=\"https://github.com/cwl157/wpf-onedrive-graph\" target=\"_blank\">on GitHub.</a>\r\n<br />\r\n<br />\r\n<h3>The Application</h3>\r\nThe application is a WPF app that lets the user sign-in and sign-out of OneDrive and upload and download a file given a local file path and OneDrive file path.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/app-screenshot.png\" alt-text=\"app screenshot\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<h3>Create App Registration in Azure AD</h3>\r\nThe first step is to create the app registration in Azure AD. Sign-in to the azure portal and locate the Azure Active Directory resource.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/find-ad.png\" alt-text=\"find ad\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\nClick on <code>App registrations</code> from the menu on the left side. This presents a list of applications registered with Azure Active Directory.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/app-registrations-menu.png\" alt-text=\"AD menu\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/list-app-registrations.png\" alt-text=\"App registration list\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nClick on <code>New registration</code> at the top of the page.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/new-registration.png\" alt-text=\"new registration\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\nGive the new app registration a name. Next select the 3rd option in the Supported account types section labelled Accounts in any organizational directory and personal Microsoft accounts. Finally under the Redirect URI section, select the <code>Public client/native (mobile & desktop)</code> option and give it a value of <code>http://localhost</code> If you're developing the application for .NET Framework, that value needs to be something different. In dotnet core, it was changed to use the browser to sign-in users to desktop apps. Click the Register button at the bottom to create the app registration.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/register-app.png\" alt-text=\"Register the app\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\nAfter the registration is created, you will be taken to the app registration overview page. The next step is to add the necessary API permissions and we'll do that in the next section.\r\n<br /><br />\r\n<h3>Add Microsoft Graph API Permissions</h3>\r\nWe need to provide the application the necessary permissions within the Microsoft Graph API to manage files in OneDrive. This includes the <code>Files.ReadWrite</code> and <code>Files.ReadWrite.All</code> permissions.\r\n<br /><br />\r\nFrom the app registration overview page, click on <code>API permissions</code> under the Manage section in the menu on the left side.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/api-permissions.png\" alt-text=\"API Permissions\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\nClick <code>Add a permission</code>. Select Microsoft Graph under the Microsoft APIs section. Choose delegated permissions. Search for <code>files</code> in the search box under Select permissions. This will bring up a list of file permissions. This is the required API for managing OneDrive files. Since we want to read and write files, select <code>Files.ReadWrite</code> and <code>Files.ReadWrite.All</code> for the permissions. Click the Add permissions button.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/graph-permissions.png\" alt-text=\"select graph permissions\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/delegated-permissions.png\" alt-text=\"select delegate permissions\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/search-select-add-permissions.png\" alt-text=\"File permissions\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\nAfter adding the permissions the list of configured permissions should look like the screenshot below.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/post-configured-permissions.png\" alt-text=\"List of permissions\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<h3>Configure the WPF App</h3>\r\nWe're now ready to configure the application and try it out. Clone the <a href=\"https://github.com/cwl157/wpf-onedrive-graph\" target=\"_blank\">repository on GitHub.</a> Open the <code>ClientInfo.cs</code> class and change the <code>ClientId</code> placeholder to the client ID of the azure app registration created above. That's it! That's the only required configuration for the app. You're now ready to test out the functionality, which I'll detail in the sections that follow.\r\n<h3>Sign-In</h3>\r\nThe application uses the <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-overview\" target=\"_blank\">MSAL</a> library to authenticate the user. Upon clicking <code>Sign-In</code>, the app tries to acquire a token silently. If that fails, a <code>MsalUiRequiredException</code> exception is thrown. This means, we need to acquire the token interactively. This will open a browser window and present a Microsoft sign in prompt. Sign in with your Microsoft account. If successful, a message will be displayed to close the browser window and the application will display token information in the <code>token info</code> section.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/click-signin.png\" alt-text=\"Click sign-in\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/signin-ms.png\" alt-text=\"Sign-in with microsoft account\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/sign-in-result.png\" alt-text=\"sign in result\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive/result-token-info.png\" alt-text=\"token info in app\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nThe code of the <code>Login_Click</code> method is below. It first tries to acquire a token silently. If that fails, it prompts the user to login. If login is successful, it initializes the graphClient and displays the results.\r\n<pre>\r\n<code class=\"language-csharp\">\r\nprivate async void Login_Click(object sender, RoutedEventArgs e)\r\n{\r\n    AuthenticationResult authResult = null;\r\n    var app = App.PublicClientApp;\r\n    IAccount firstAccount;\r\n\r\n    var accounts = await app.GetAccountsAsync();\r\n    firstAccount = accounts.FirstOrDefault();\r\n    InteractiveAuthenticationProvider i = new InteractiveAuthenticationProvider(app, scopes);\r\n\r\n    try\r\n    {\r\n        authResult = await app.AcquireTokenSilent(scopes, firstAccount)\r\n            .ExecuteAsync();\r\n    }\r\n    catch (MsalUiRequiredException ex)\r\n    {\r\n        // A MsalUiRequiredException happened on AcquireTokenSilent. \r\n        // This indicates you need to call AcquireTokenInteractive to acquire a token\r\n        System.Diagnostics.Debug.WriteLine($\"MsalUiRequiredException: {ex.Message}\");\r\n\r\n        try\r\n        {\r\n            authResult = await app.AcquireTokenInteractive(scopes)\r\n                .WithAccount(firstAccount)\r\n                .WithParentActivityOrWindow(new WindowInteropHelper(this).Handle) // optional, used to center the browser on the window\r\n                .WithPrompt(Microsoft.Identity.Client.Prompt.SelectAccount)\r\n                .ExecuteAsync();\r\n        }\r\n        catch (MsalException msalex)\r\n        {\r\n            ResultText.Text = $\"Error Acquiring Token:{System.Environment.NewLine}{msalex}\";\r\n        }\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        ResultText.Text = $\"Error Acquiring Token Silently:{System.Environment.NewLine}{ex}\";\r\n        return;\r\n    }\r\n\r\n    if (authResult != null)\r\n    {\r\n        _graphClient = new GraphServiceClient(i);\r\n        ResultText.Text = await GetHttpContentWithToken(graphAPIEndpoint, authResult.AccessToken);\r\n        DisplayBasicTokenInfo(authResult);\r\n        this.SignOutButton.Visibility = Visibility.Visible;\r\n        this.SignInButton.Visibility = Visibility.Collapsed;\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n<h3>Upload to OneDrive</h3>\r\nThe next function is to upload a file to OneDrive. In the <code>file to upload</code> path, add the path to a file on your local device. Add a path to where you want to upload it to in OneDrive in the textbox labelled <code>OneDrive path</code>. If you want to upload it to the root of OneDrive, leave this textbox blank.Click the <code>Upload</code> button and a message will display in the <code>API Call Results</code> with how many bytes are uploaded and an item ID when the upload is complete. Below is the method for uploading a file to OneDrive.\r\n<pre>\r\n<code class=\"language-csharp\">\r\nprivate async void UploadButton_Click(object sender, RoutedEventArgs e)\r\n{\r\n    ResultText.Text = \"\";\r\n    if (_graphClient == null)\r\n    {\r\n        ResultText.Text = \"Please sign-in first\";\r\n        return;\r\n    }\r\n    try\r\n    {\r\n        string fileName = Path.GetFileName(FilePathUpload.Text);\r\n\r\n        using (var fileStream = System.IO.File.OpenRead(FilePathUpload.Text))\r\n        {\r\n            // Use properties to specify the conflict behavior\r\n            // in this case, replace\r\n            var uploadProps = new DriveItemUploadableProperties\r\n            {\r\n                ODataType = null,\r\n                AdditionalData = new Dictionary&lt;string, object&gt;\r\n                {\r\n                    { \"@microsoft.graph.conflictBehavior\", \"replace\" }\r\n                }\r\n            };\r\n\r\n            // Create the upload session\r\n            // itemPath does not need to be a path to an existing item\r\n            var uploadSession = await _graphClient.Me.Drive.Root\r\n                .ItemWithPath(OneDrivePath.Text + \"/\" + fileName)\r\n                .CreateUploadSession(uploadProps)\r\n                .Request()\r\n                .PostAsync();\r\n\r\n            // Max slice size must be a multiple of 320 KiB\r\n            int maxSliceSize = 320 * 1024;\r\n            var fileUploadTask =\r\n                new LargeFileUploadTask&lt;DriveItem&gt;(uploadSession, fileStream, maxSliceSize);\r\n\r\n            // Create a callback that is invoked after each slice is uploaded\r\n            IProgress&lt;long&gt; progress = new Progress&lt;long&gt;(prog =&gt;\r\n            {\r\n                ResultText.Text = $\"Uploaded {prog} bytes of {fileStream.Length} bytes\";\r\n            });\r\n\r\n            try\r\n            {\r\n                // Upload the file\r\n                var uploadResult = await fileUploadTask.UploadAsync(progress);\r\n\r\n                if (uploadResult.UploadSucceeded)\r\n                {\r\n                    // The ItemResponse object in the result represents the\r\n                    // created item.\r\n                    ResultText.Text = $\"Upload complete, item ID: {uploadResult.ItemResponse.Id}\";\r\n                }\r\n                else\r\n                {\r\n                    ResultText.Text = \"Upload failed\";\r\n                }\r\n            }\r\n            catch (ServiceException ex)\r\n            {\r\n                ResultText.Text = $\"Error uploading: {ex.ToString()}\";\r\n            }\r\n        }\r\n    }\r\n    catch (Microsoft.Graph.ServiceException ex)\r\n    {\r\n        ResultText.Text = ex.Error.ToString();\r\n    }\r\n    catch (MsalUiRequiredException ex)\r\n    {\r\n        ResultText.Text = \"Please sign-in first\";\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        ResultText.Text = ex.Message;\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n<h3>Download From OneDrive</h3>\r\nWe can also download a file from OneDrive. Add the full path to a file in OneDrive in the textbox labelled <code>OneDrive file</code>. If the file is in the OneDrive root, only the file name needs to be entered. Next, provide a destination folder where you want to download the file to in the <code>Local file path</code> textbox and click the <code>Download</code> button. The <code>API Call Results</code> field will show a status of Downloading... and Download Complete when it's done. Browse to the local destination folder and the file, with the same file name as OneDrive will be available.\r\n<br /><br />\r\nThe code for the download method is below.\r\n<pre>\r\n<code class=\"language-csharp\">\r\nprivate async void DownloadButton_Click(object sender, RoutedEventArgs e)\r\n{\r\n    ResultText.Text = \"\";\r\n    if (_graphClient == null)\r\n    {\r\n        ResultText.Text = \"Please sign-in first\";\r\n        return;\r\n    }\r\n\r\n    try\r\n    {\r\n        var driveResult = await _graphClient.Me.Drive.Request().GetAsync();\r\n        var itemResult = await _graphClient.Me.Drive.Root.ItemWithPath(FilePathDownload.Text).Request().GetAsync();\r\n        ResultText.Text = \"Downloading...\";\r\n        var stream = await _graphClient.Me.Drive.Items[itemResult.Id].Content.Request().GetAsync();\r\n        using (var memoryStream = new System.IO.MemoryStream())\r\n        {\r\n            stream.CopyTo(memoryStream);\r\n            System.IO.File.WriteAllBytes(LocalFilePath.Text + \"\\\\\" + itemResult.Name, memoryStream.ToArray());\r\n        }\r\n        ResultText.Text = \"Download Complete\";\r\n    }\r\n    catch (Microsoft.Graph.ServiceException ex)\r\n    {\r\n        ResultText.Text = ex.Error.ToString();\r\n    }\r\n    catch (MsalUiRequiredException ex)\r\n    {\r\n        ResultText.Text = \"Please sign-in first\";\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        ResultText.Text = ex.Message;\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n<h3>Sign-out</h3>\r\nThe final feature of the app is the ability to sign out. Once signed in the <code>Sign-In</code> button changes to a <code>Sign-Out</code> button. To sign out the Microsoft Identity public application object removes the account and you will be required to sign-in again. The sign out method is below.\r\n<pre>\r\n<code class=\"language-csharp\">\r\nprivate async Task SignOut()\r\n{\r\n    var accounts = await App.PublicClientApp.GetAccountsAsync();\r\n    if (accounts.Any())\r\n    {\r\n        try\r\n        {\r\n            await App.PublicClientApp.RemoveAsync(accounts.FirstOrDefault());\r\n            _graphClient = null;\r\n            this.ResultText.Text = \"User has signed-out\";\r\n            this.SignOutButton.Visibility = Visibility.Collapsed;\r\n            this.SignInButton.Visibility = Visibility.Visible;\r\n        }\r\n        catch (MsalException ex)\r\n        {\r\n            ResultText.Text = $\"Error signing-out user: {ex.Message}\";\r\n        }\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n<h3>Conclusion</h3>\r\nIn conclusion, you can leverage Azure AD, Microsoft Identity, and Graph API to authenticate a user and manage files in OneDrive. This shows a simple example of uploading and downloading one file but can be extended to use OneDrive for more sophisticated storage scenarios. For more information about using the Graph API with OneDrive visit the following additional resources: <a href=\"https://docs.microsoft.com/en-us/onedrive/developer/rest-api/?view=odsp-graph-online\" target=\"_blank\">OneDrive and SharePoint in Microsoft Graph</a>, <a href=\"https://docs.microsoft.com/en-us/graph/api/resources/onedrive?view=graph-rest-1.0\" target=\"_blank\">Working with files in Microsoft Graph</a>, and <a href=\"https://docs.microsoft.com/en-us/graph/onedrive-concept-overview\" target=\"_blank\">OneDrive file storage API overview.</a>","author":"Carl Layton","publishedDate":"2021-10-01T13:00:00Z","friendlyUri":"use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive","isPublished":true,"previousPostUri":"azure-b2c-authentication-with-api-and-spa","previousPostTitle":"Azure B2C authentication with API and SPA","nextPostUri":"use-azure-ad-to-authorize-access-to-azure-blob-storage","nextPostTitle":"Use Azure AD to Authorize Access to Azure Blob Storage","isFeatured":true,"tags":["azure","Authentication","wpf","csharp","dotnet","OneDrive"]}