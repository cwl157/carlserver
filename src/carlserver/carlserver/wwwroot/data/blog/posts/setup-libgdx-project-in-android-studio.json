{"id":8,"title":"Setup libGDX Project In Android Studio","summary":"In this post, I walk through the steps to create a libGDX project and get it running in Android Studio 3. There are a few prompts along the way that took me several tries at different combinations before I found the one  that works so I decided to document it here. This post assumes Android Studio version 3.0.1, the Android SDK, and Java are already installed.","body":"<a target=\"_blank\" href=\"https://libgdx.badlogicgames.com\">libGDX</a>  is a cross platform game development library for Java developers. It supports desktop, Android, HTML 5, and IOS, although I have only used it for desktop and Android platforms. It is similar to <a target=\"_blank\" href=\"http://www.monogame.net\">MonoGame</a> and the <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Microsoft_XNA\">XNA framework</a>. If you are familiar with those frameworks in .NET and have basic knowledge of the Java programming language, creating games in libGDX is pretty straightforward and fun.<br /><br />\r\nI assume <a target=\"_blank\" href=\"https://developer.android.com/studio/\">Android Studio</a>, <a target=\"_blank\" href=\"https://developer.android.com/studio\">the Android SDK</a>, and <a target=\"_blank\" href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">Java</a> are already installed. After installing those go to the <a target=\"_blank\" href=\"https://libgdx.badlogicgames.com/download.html\">libGDX download page</a> and download the project setup app.\r\n<br /><br />\r\nThis is a jar file. Double click to open it. Specific project details go here. There are a number of extensions and advanced options available. Gradle is used to manage these dependencies, however, I have not tried using more than the defaults.\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/InitProject.PNG\" style=\"width:75%; height: 75%\" />\r\n<br /><br />\r\nAfter all desired details are entered click 'Generate'. This is where I get my first prompt. This prompt is asking if I would like to use a more recent version of the Android build tools. If you see this prompt as well, click 'Yes'.\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/BuildToolsPrompt.png\" style=\"width:75%; height:75%\" />\r\n<br /><br />\r\nThat prompt is followed by another prompt stating that I have a more recent Android API than the one recommended. I also select 'Yes' to this prompt.\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/NewerApiPrompt.PNG\" style=\"width:75%; height:75%\" />\r\n<br /><br />\r\nAt this point the libGDX setup app will create the project files in the destination directory chosen at the beginning.  The next step is to open Android Studio and open the build.gradle file that was created.\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/OpenInAndroidStudio.PNG\" style=\"width:75%; height:75%\" />\r\n<br /><br />\r\nI get a prompt that the project and Android Studio point to 2 different Android SDKs. I think this is because I also have Xamarin installed. If you also get this prompt choose to use Android Studio's SDK.\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/UseAndroidSDKPrompt.PNG\" style=\"width:75%; height:75%\" />\r\n<br /><br />\r\nAfter the project loads, Android Studio may prompt you to update gradle. Choose 'Don't remind me again for this project'.\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/DoNotUpgradeGradlePrompt.PNG\" style=\"width:75%; height:75%\" />\r\n<br /><br />\r\nThe Android Run configuration should already be configured. Click on the Run menu and choose 'Run android'. Pick a connected device or an emulator and click OK. If everything is working you should see a red background with a \"Bad Logic\" logo.\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/AndroidRunning.png\" style=\"width:75%; height:75%\" />\r\n<br /><br />\r\nThat's it if Android is the only configuration you want, however, I will also show you how to setup a desktop configuration. First, Select 'Edt Configurations' from the 'Run' menu. Click the '+' icon in the upper left and choose 'Application'.\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/ClickPlusAddApp.PNG\" style=\"width:25%; height:25%\" />\r\n<br /><br />\r\nThere are 4 fields that need to be filled in. Below is a picture of the final settings. After that, I explain each of the 4 required fields.\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/FinalDesktopConfig.PNG\" style=\"width:75%; height:75%\" />\r\n<br />\r\n<table class=\"table\">\r\n<thead>\r\n<tr>\r\n<th scope=\"col\">Field</th>\r\n<th scope=\"col\">Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>Name</td>\r\n<td>Used to identify the Run Configuration and can be anything. I went with 'Desktop' to identify it as the Desktop run configuration</td>\r\n</tr>\r\n<tr>\r\n<td>Main Class</td>\r\n<td>The name of the java class that contains the main method. Click on the ellipse to see options to select from</td>\r\n</tr>\r\n<tr>\r\n<td>Working Directory</td>\r\n<td>The path to the assets directory of the android project. We're going to use the same assets directory for both Android and Desktop configurations</td>\r\n</tr>\r\n<tr>\r\n<td>Use classpath of module</td>\r\n<td>Pick Desktop</td> \r\n</tr>\r\n</tbody>\r\n</table>\r\n<br />\r\nClicking the elipse next to main class gives a nice selector screen to pick the main class\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/DesktopConfigPickMain.PNG\" style=\"width:100%; height:100%\" />\r\n<br /><br />\r\nSelect Run... from the Run menu. This brings up a list of available configurations. Choose Desktop to launch the desktop application.\r\n<br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/PickEditConfig.PNG\" style=\"width:75%; height:75%\" />\r\n<br />\r\n<br /><br />\r\nJust like the Android application, you should see a red window with a \"Bad Logic\" image. This means everything is working.\r\n</br />\r\n<img src=\"/data/blog/posts/img/setup-libgdx-project-in-android-studio/DesktopRunning.PNG\" style=\"width:75%; height:75%\" />\r\n</br /><br />\r\nIn conclusion, it is possible to develop libGDX applications using Android Studio but there are a few selections that have to be made along the way. It is not always obvious from the message what the correct answer is but after some experimentation I found this combination works for me. I don't know if you will see all of the same prompts that I did. Some of them might be because I also have a Xamarin development environment through Visual Studio.","author":"Carl Layton","publishedDate":"2018-05-10T00:00:00Z","friendlyUri":"setup-libgdx-project-in-android-studio","isPublished":true,"previousPostUri":"installing-posh-git-a-powershell-environment-for-git","previousPostTitle":"Installing posh-git - A PowerShell Environment for Git","nextPostUri":"asp-dotnet-core-mvc-dependency-injection-overview","nextPostTitle":"ASP .NET Core MVC Dependency Injection Overview","tags":["libGDX","Android","Android Studio","Java"]}