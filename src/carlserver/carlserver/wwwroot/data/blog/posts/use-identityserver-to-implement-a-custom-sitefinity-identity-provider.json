{"id":10,"title":"Use IdentityServer to Implement a Custom Sitefinity Identity Provider","summary":"In this post, I detail the steps to implement a custom external identity provider in Sitefinity. At the end, you will have a Sitefinity instance configured as a client to a separate IdentityServer application. When a user authenticates to IdentityServer the user will be authenticated to Sitefinity and assigned the 'User' role. This uses the OpenID Connect standard. I do not assume there is a pre-configured IdentityServer application already running. I will cover both the IdentityServer setup and Sitefinity setup. The software required for this tutorial is Visual Studio 2017, .NET framework 4.7.1, dotnet core 2.0, and git (Optional).","body":"In this post, I detail the steps to implement a custom external identity provider in Sitefinity. At the end, you will have a Sitefinity instance configured as a client to a separate IdentityServer application. When a user authenticates to IdentityServer the user will be authenticated to Sitefinity and assigned the 'User' role. This uses the OpenID Connect standard. I do not assume there is a pre-configured IdentityServer application already running. I will cover both the IdentityServer setup and Sitefinity setup. The software required for this tutorial is <a target=\"_blank\" href=\"https://visualstudio.microsoft.com/downloads/\">Visual Studio 2017</a>, <a target=\"_blank\" href=\"https://www.microsoft.com/net/download/visual-studio-sdks\">.NET framework 4.7.1</a>, <a target=\"_blank\" href=\"https://www.microsoft.com/net/download/visual-studio-sdks\">dotnet core 2.0</a>, and <a target=\"_blank\" href=\"https://git-scm.com/downloads\">git (Optional)</a>.\r\n<br />\r\n<h3>Table of Contents</h3>\r\n<br />\r\n<h3>Install Applications</h3>\r\n<br />\r\nThe first step is to download the required applications. We need a running instance of Sitefinity 11. The trial can be downloaded from <a target=\"_blank\" href=\" https://www.sitefinity.com/try-now\">https://www.sitefinity.com/try-now</a>. The <a target=\"_blank\" href=\"https://docs.sitefinity.com/create-a-project\">Sitefinity Documentation</a> details how to create a new project using the Sitefinity Project Manager.\r\n<br />\r\n<br />\r\nOnce you have the trial sitefinity site up and running, we need to setup an IdentityServer instance. Don't worry the <a target=\"_blank\" href=\"https://github.com/IdentityServer/IdentityServer4.Samples\">IdentityServer GitHub page has examples</a> to get started. Clone or download the examples </a> from GitHub. We are interested in the Implicit Flow Authentication quickstart example. IdentityServer has accompanying documentation for using this quickstart <a target=\"_blank\" href=\"http://docs.identityserver.io/en/release/quickstarts/3_interactive_login.html\">here.</a><br />\r\n<br />\r\n<h3>IdentityServer Authentication Flow</h3>\r\n<br />\r\nThe next step is to make sure we have IdentityServer running correctly. This is the same authentication flow that will take place from Sitefinity, once we set it up. Open the \"3_ImplicitFlowAuthentication\" sample in Visual Studio and start both the <code>QuickstartIdentityServer</code> and the <code>MvcClient</code> projects. Click on the Secure menu item of the <code>MvcClient</code> app.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/id_srvr_click_secure.png\" /><br />\r\n<br />\r\nThis redirects to the login page of IdentityServer. You can tell because the client app's url is <code>http://localhost:5002</code> and the login url is <code>http://localhost:5000/account/login</code> with a bunch of stuff after it.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/id_srvr_login.png\" />\r\n<br />\r\nThe IdentityServer example keeps all data in memory. The clients and users can be found in <code>Config.cs</code>. There are 2 users setup by default alice and bob. Both use the password, password. Enter credentials for one of them and click login. You are presented with  a standard client authorization page. This page is asking if it is OK for the client \"MVC Client\" to have access to the user's data. Click \"Yes, Allow\".\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/id_srvr_mvcclient_perms.png\" />\r\n<br />\r\nFinally, you are redirected back to the original page you were trying to access. In this case, <code>http://localhost:5002/Home/Secure</code>. It displays user data the mvc client application knows about the user.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/mvcclient_secure.png\" />\r\n<br />\r\nAlice is now successfully authenticated to the client app through the IdentityServer app. This is possible because the client app is explicitly setup as a client in the identity service. In the next step we will add Sitefinity as another client that can authenticate through our IdentityServer.\r\n<br />\r\n<h3>Sitefintiy as an IdentityServer client</h3>\r\n<br />\r\nAt this point we have Sitefinity and IdentityServer setup. Now we can make them talk to each other. First, we will add sitefinity as a client in IdentityServer. As mentioned earlier, data in the example is kept in <code>Config.cs</code>. There is a statically defined list of clients in <code class=\"language-csharp\">public static IEnumerable&lt;Client&gt; GetClients()</code>. We will add <code>sfcustom</code> to this list as detailed below.\r\n<pre>\r\n<code class=\"language-csharp\">\r\nnew Client\r\n{\r\n     ClientId = \"sfcustom\",\r\n     ClientName = \"sfcustom\",\r\n     AllowedGrantTypes = GrantTypes.Implicit,\r\n     RedirectUris = { \"http://localhost:60877/Sitefinity/Authenticate/OpenID/signin-custom\" },\r\n     AllowedScopes =\r\n     {\r\n          IdentityServerConstants.StandardScopes.OpenId,\r\n          IdentityServerConstants.StandardScopes.Profile,\r\n          IdentityServerConstants.StandardScopes.Email\r\n     }\r\n}\r\n</code>\r\n</pre>\r\n<br />\r\nThere are a couple important points about the code snippet above. The <code>RedirectUris</code> property needs to go to your local Sitefinity instance. You may need to change the port number on the host name. Furthermore, it needs to point to the sitefinity signin url which is <code>/Sitefinity/Authenticate/OpenID/&lt;custom_identifier&gt;</code>. <code>&lt;custom_identifier&gt;</code> can be anything as long as it is unique among your custom providers in Sitefinity. Since this is the first one we're setting up, we should be ok.\r\n<br /><br />\r\nSitefinity also requires email as an identity resource so we need to add <code class=\"language-csharp\">new IdentityResources.Email()</code> to the <code class=\"language-csharp\">GetIdentityResources()</code> method in <code>Config.cs</code>. It is also defined in the allowed scopes above. The full method is below.\r\n<pre>\r\n<code class=\"language-csharp\">\r\npublic static IEnumerable&lt;IdentityResource&gt; GetIdentityResources()\r\n{\r\n     return new List<IdentityResource>\r\n     {\r\n          new IdentityResources.OpenId(),\r\n          new IdentityResources.Profile(),\r\n          new IdentityResources.Email()\r\n     };\r\n}\r\n</code>\r\n</pre>\r\n<br /><br />\r\nOne last change is required to the users defined in IdentityServer. We need to add <code>email</code> as a claim on our users. Go to the section of <code>Config.cs</code> where Alice and Bob are defined and add an <code>email</code> claim to each like this <code class=\"language-csharp\">new Claim(\"email\", \"bob@test.com\")</code> and <code class=\"language-csharp\">new Claim(\"email\", \"alice@test.com\").</code> Finally, Sitefinity supports claims for <code>given_name</code>and <code>family_name</code> so to make these users show up a little better in Sitefinity, we're going to remove the name claim and add these. The full <code>config.cs</code> file is listed below.\r\n<pre>\r\n<code class=\"language-csharp\">\r\n// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nusing IdentityServer4;\r\nusing IdentityServer4.Models;\r\nusing IdentityServer4.Test;\r\nusing System.Collections.Generic;\r\nusing System.Security.Claims;\r\n\r\nnamespace QuickstartIdentityServer\r\n{\r\n    public class Config\r\n    {\r\n        // scopes define the resources in your system\r\n        public static IEnumerable&lt;IdentityResource&gt; GetIdentityResources()\r\n        {\r\n            return new List&lt;IdentityResource&gt;\r\n            {\r\n                new IdentityResources.OpenId(),\r\n                new IdentityResources.Profile(),\r\n                new IdentityResources.Email()\r\n            };\r\n        }\r\n\r\n        public static IEnumerable&lt;ApiResource&gt; GetApiResources()\r\n        {\r\n            return new List&lt;ApiResource&gt;\r\n            {\r\n                new ApiResource(\"api1\", \"My API\")\r\n            };\r\n        }\r\n\r\n        // clients want to access resources (aka scopes)\r\n        public static IEnumerable&lt;Client&gt; GetClients()\r\n        {\r\n            // client credentials client\r\n            return new List&lt;Client&gt;\r\n            {\r\n                new Client\r\n                {\r\n                    ClientId = \"client\",\r\n                    AllowedGrantTypes = GrantTypes.ClientCredentials,\r\n\r\n                    ClientSecrets = \r\n                    {\r\n                        new Secret(\"secret\".Sha256())\r\n                    },\r\n                    AllowedScopes = { \"api1\" }\r\n                },\r\n\r\n                // resource owner password grant client\r\n                new Client\r\n                {\r\n                    ClientId = \"ro.client\",\r\n                    AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,\r\n\r\n                    ClientSecrets = \r\n                    {\r\n                        new Secret(\"secret\".Sha256())\r\n                    },\r\n                    AllowedScopes = { \"api1\" }\r\n                },\r\n\r\n                // OpenID Connect implicit flow client (MVC)\r\n                new Client\r\n                {\r\n                    ClientId = \"mvc\",\r\n                    ClientName = \"MVC Client\",\r\n                    AllowedGrantTypes = GrantTypes.Implicit,\r\n\r\n                    RedirectUris = { \"http://localhost:5002/signin-oidc\" },\r\n                    PostLogoutRedirectUris = { \"http://localhost:5002/signout-callback-oidc\" },\r\n\r\n                    AllowedScopes =\r\n                    {\r\n                        IdentityServerConstants.StandardScopes.OpenId,\r\n                        IdentityServerConstants.StandardScopes.Profile\r\n                    }\r\n                },\r\n                new Client\r\n                {\r\n                    ClientId = \"sfcustom\",\r\n                    ClientName = \"sfcustom\",\r\n                    AllowedGrantTypes = GrantTypes.Implicit,\r\n\r\n                  RedirectUris = { \"http://localhost:60877/Sitefinity/Authenticate/OpenID/signin-custom\" },\r\n\r\n                    AllowedScopes =\r\n                    {\r\n                        IdentityServerConstants.StandardScopes.OpenId,\r\n                        IdentityServerConstants.StandardScopes.Profile,\r\n                        IdentityServerConstants.StandardScopes.Email\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public static List&lt;TestUser&gt; GetUsers()\r\n        {\r\n            return new List&lt;TestUser&gt;\r\n            {\r\n                new TestUser\r\n                {\r\n                    SubjectId = \"1\",\r\n                    Username = \"alice\",\r\n                    Password = \"password\",\r\n\r\n                    Claims = new List&lt;Claim&gt;\r\n                    {\r\n                        new Claim(\"given_name\", \"Alice\"),\r\n                        new Claim(\"nickname\", \"Alice\"),\r\n                        new Claim(\"website\", \"https://alice.com\"),\r\n                        new Claim(\"email\", \"alice@test.com\"),\r\n                        new Claim (\"family_name\", \"Taylor\")\r\n                    }\r\n                },\r\n                new TestUser\r\n                {\r\n                    SubjectId = \"2\",\r\n                    Username = \"bob\",\r\n                    Password = \"password\",\r\n\r\n                    Claims = new List&lt;Claim&gt;\r\n                    {\r\n                        new Claim(\"given_name\", \"Robert\"),\r\n                        new Claim(\"nickname\", \"Bob\"),\r\n                        new Claim(\"website\", \"https://bob.com\"),\r\n                        new Claim(\"email\", \"bob@test.com\"),\r\n                        new Claim(\"family_name\", \"Smith\")\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n<br />\r\n<h3>Sitefinity Setup</h3>\r\n<br />\r\nThe final piece of the puzzle is to setup Sitefinity to be a client of our IdentityServer. The biggest challenge is to get all of the settings exactly correct to make this work.\r\nThe first step is to configure Sitefinity to be a client based on the settings entered in IdentityServer. To do this, launch Sitefinity from Visual Studio and login as the admin user you created when you set up the site. Go to Administration > Settings > Advanced Settings. Expand the Authentication menu on the left side. Expand SecurityTokenService and click on AuthenticationProviders.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/menu_nav.PNG\" />\r\n<br />\r\nClick the Create New button on the right side of the screen. Below are the initial settings for the custom provider.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/auth_settings.PNG\" />\r\n<br />\r\nThe trickiest part of the setup is to get all of the parameters correct and they have to match our client setup in IdentityServer we created earlier. Each parameter name and value is case sensitive and must match exactly for this to work. I’m going to go over each one in detail.\r\n<br /><br />\r\nCreate a new parameter with key <code>clientid</code> and value <code>sfcustom</code>. This must match the clientid we setup in IdentityServer for the Sitefinity client.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/param_clientid.PNG\" />\r\n<br />\r\n<br />\r\nCreate a new parameter with key <code>issuer</code> and value <code>http://localhost:5000/</code> This is the url to our IdentityServer instance. Make sure the port matches the port of your IdentityServer instance that we setup earlier in this post.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/param_issuer.PNG\" />\r\n<br />\r\n<br />\r\nCreate a new parameter with key <code>redirectUri</code> and value <code>http://localhost:60877/Sitefinity/Authenticate/OpenID/signin-custom</code>. This must match the RedirectUris property we setup in IdentityServer for the Sitefinity client.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/param_redirectUri.PNG\" />\r\n<br />\r\n<br />\r\nCreate a new parameter with key <code>responseType</code> and value <code>id_token</code>. \r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/param_responseType.PNG\" />\r\n<br />\r\n<br />\r\nCreate a new parameter with key <code>scope</code> and value <code>openid profile email</code>. This must match the scope setup in the client in IdentityServer.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/param_scope.PNG\" />\r\n<br />\r\n<br />\r\nCreate a new paramter with key <code>caption</code> and value <code>LoginCustom</code>. This value actually doesn’t matter. It’s just the text shown on the login button.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/param_caption.PNG\" />\r\n<br /><br />\r\nThe next step is to create a custom initializer to initialize our external identity provider at Sitefinity Startup. This involves creating a class that inherits from the <code class=\"language-csharp\">AuthenticationProvidersInitializer</code> class. Open the csproj file of the sitefinity site in Visual Studio. Create a new class called <code class=\"language-csharp\">AuthenticationProvidersInitializerExtender</code>. <a target=\"_blank\" href=\"https://docs.sitefinity.com/for-developers-implement-custom-external-identity-providers\">This Sitefinity article</a> provides the class and how to register it. You can copy and paste these directly into your project. The name <code>CustomSTS</code> must match the Name configured in the custom authentication provider settings above.\r\n<br /><br />\r\n<h3>Put It All Together</h3>\r\nWe are ready to test Sitefinity. Navigate to <code>/sitefinity</code> in your site and click the <code>LoginCustom</code> button. (Or whatever value you assigned to the <code>caption</code> paramter.) If you don't see the button, you must restart the site after making the configuration changes above.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/login_custom_button.PNG\" />\r\n<br />\r\nThe login flow looks identical to the one for <code>MvcClient</code> above. Use one of the users we configured in IdentityServer, either Alice or Bob.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/idsvr_login_form.PNG\" />\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/idsvr_permissions_list.PNG\" />\r\n<br />\r\nAfter successfully logging in and accepting the permissions for the <code>sfcustom</code> client, you will be redirected to <code>/sitefinity</code>. This will display a message that the user doesn't have permission. This is because we only assigned the <code>User</code> role which can't access the backend by default.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/sf_user_authed.PNG\" />\r\n<br />\r\nHowever, this verifies that sitefinity knows who the user is. Login as the default administrator and view the users. The user name, role, and email will be in the list.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-identityserver-to-implement-a-custom-sitefinity-identity-provider/sf_users.PNG\" />\r\n<br />\r\n<br />\r\nIf you made it this far, we have an IdentityServer with a Sitefinity client using it to authenticate users. You can configure IdentityServer any way you want to control user accounts. You can also create content in Sitefinity using role based authorization tied to the external users.\r\n<br />\r\n<br />\r\nThat concludes how to setup Sitefinity to be a client of IdentityServer. The high level steps are: setup a basic IdentityServer, setup a basic Sitefinity website, create a custom client in both IdentityServer and Sitefinity that have matching properties, and create a custom <code class=\"language-csharp\">AuthenticationProvidersInitializer</code> to initialize the custom provider at Sitefinity startup. There are more steps to implement a fully functioning user management system but I hope this guide helps you figure out the initial settings to get up and running with IdentityServer and Sitefinity.","author":"Carl Layton","publishedDate":"2018-07-24T17:30:00Z","friendlyUri":"use-identityserver-to-implement-a-custom-sitefinity-identity-provider","isPublished":true,"previousPostUri":"asp-dotnet-core-mvc-dependency-injection-overview","previousPostTitle":"ASP .NET Core MVC Dependency Injection Overview","nextPostUri":null,"nextPostTitle":null,"tags":["IdentityServer","Sitefinity","ASP .NET core MVC","Authentication"]}