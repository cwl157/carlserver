{"id":23,"title":"Azure B2C authentication with API and SPA","summary":"In this post, I configure an Azure B2C tenant and show how to authenticate a user through a single page application to connect to endpoints in a custom API application. By the end, you will have a working demo of an authenticated user interacting with authorized API endpoints through a SPA using Azure B2C. The single page application contains a breakout-inspired game that tracks users' scores using a custom API. An Azure subscription is required but, at the time of this post, creating an azure B2C tenant is free up to a certain number of active users.","body":"In this post I configure an Azure B2C tenant, register an API application and single page application, authenticate users through the single page app, and authorize endpoints in the API application for the single page app to use. That's a lot of steps! To get started, you will need an azure subscription with permissions to manage azure active directory B2C, Visual Studio 2019, node, and npm. For my example, I'm running node version 12.16.2 and npm version 6.14.4. The API is an ASP .NET Framework application and the single page application uses vanilla Javascript and a node express server to run it. The single page application is based on the <a href=\"https://docs.microsoft.com/en-us/azure/active-directory-b2c/quickstart-single-page-app\" target=\"_blank\">Quickstart: Set up sign in for a single-page app using Azure Active Directory B2C</a> quick start guide. The API is based on the TaskService project provided in the following tutorial from Microsoft: <a href=\"https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-web-app-dotnet?tabs=app-reg-ga\" target=\"_blank\">Tutorial: Enable authentication in a web application using Azure Active Directory B2C.</a> The example to go along with this post is <a href=\"https://github.com/cwl157/azure-b2c-spa\" target=\"_blank\">available in GitHub.</a>\r\n<br /><br />\r\n<h3>The Application</h3>\r\nThere are 2 applications. The API is a .NET Framework Web API application with one endpoint named <code>gamestat</code>. The endpoint supports GET and POST. GET returns all the authenticated users' scores and a timestamp of when each was submitted and POST posts a new score with timestamp.\r\n<br /><br />\r\nThe single page application features a game titled Brick Buster, influenced by classic breakout style games. There is also a title bar to allow the user to sign-in / sign-out and edit their profile if signed in. There are also 2 buttons Send Score and Fetch Scores. Send score will send the user's current score to the API to save it, assuming they are authenticated. Fetch scores retrieves the user's scores from the API and also requires the user to be authenticated. The scores are listed in a table below the game.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/title_bar.PNG\" alt-text=\"spa title\" width=\"100%\" height=\"100%\"/>\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/game_with_buttons.PNG\" alt-text=\"game with buttons\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/score_list.PNG\" alt-text=\"score list\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\n<h3>Configure Azure B2C</h3>\r\nIn this section, I will show how to create a new azure B2C tenant to use in the application. This is based on <a href=\"https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-create-tenant?WT.mc_id=Portal-Microsoft_AAD_B2CAdmin\" target=\"_blank\">this Microsoft tutorial.</a>\r\n<br /><br />\r\nThe first step is to browse to the <a href=\"https://portal.azure.com\" target=\"_blank\">Azure Portal.</a> Select Create a resource from the icons.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/create-resource.png\" alt-text=\"create resource\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nSearch for <b>Azure Active Directory B2C</b> and click on it from the dropdown. This brings up the overview page for Azure Active Directory B2C. Click the Create button.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/b2c-create-page.png\" alt-text=\"b2c create page\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nSelect the option to <b>Create a new Azure AD B2C Tenant.</b>\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/create-new-tenant.png\" alt-text=\"create new tenant\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\nFill in the details for the new tenant. The domain name is the name used to connect to the tenant.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/create-details.png\" alt-text=\"create details\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nClicking Review + Create at the bottom of the page, validates the entry and allows you to review everything before creating the tenant.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/review-create.png\" alt-text=\"review and create screen\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\nAt this point, the tenant is created and a notification will be waiting in the portal notifications area. It's possible to navigate to the new tenant directly from this notification or by switching directories in the azure portal.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/tenant-creation-successful.png\" alt-text=\"tenant creation successful\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\nThe final step to setup the tenant is to add the user flows policies. These will allow applications to have sign-up / sign-in, edit profile, and reset password functionality. The user flows are shared among all the applications registered in this tenant.\r\n<br /><br />\r\nFrom the Azure Poral, make sure the directory you are currently using is the Azure B2C tenant we created in the previous section, and search for Azure AD B2C and go to the resource. This is the central place to manage the Azure AD B2C resource. For example, you can register new applications and manage users, and configure the User Flows, which is what we're going to be doing now. Click on User Flows under the Policies section.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/azure-b2c-home.png\" alt-text=\"azure b2c tenant home\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nWe will setup the first 3 user flows, sign up and sign in, profile editing, and Password reset. Choose sign up and sign in first and stick with the recommended selection\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/user-flow-picker-signup-signin.PNG\" alt-text=\"user flow picker signup signin\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nThe create screen has a lot of information. First, give your policy a name. This will be used to reference it in the applications. We only have a local email signup provider for this demo so check the radio box for step 2.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/signup-signin-step1-2.PNG\" alt-text=\"signin user flow steps 1 and 2\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nFor step 3, multifactor authentication, leave it set to email and off. For step 4, leave enforce conditional access policies to unchecked.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/signup-signin-step3-4.PNG\" alt-text=\"signin user flow steps 3 and 4\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nFor step 5, click show more and make selections to match the screenshot. Display name is an attribute and a claim, email address is an attribute, identity provider, and user's object ID are both claims.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/signup-signin-step5.PNG\" alt-text=\"signin step 5\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\nClick Create and the user flow will be created and added to the list. Edit profile and forgot password user flows are similar except the claims and attributes selected are different. For edit profile, choose the Profile editing, recommended user flow. Give it a name, select email signin as the only Identity provider option, leave the defaults of Email and Off for Multifactor authentication, and leave conditional access unchecked. For step 5, application claims, click Show more... and select display name under collect attribute and return claim columns. Select Identity Provider and User's Object ID in the return claim column. The attributes should match the screenshot below.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/edit-profile-attributes-claims.PNG\" alt-text=\"edit profile attribute claims\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\nFor the password reset user flow, choose Password reset, Recommended and click create. Provide a name, choose the reset password using email address as the only option under Identity Providers, leave the defaults of Email and Off for multifactor authentication, and leave the option under conditional access unchecked. For step 5, application claims, click Show more... and pick Display Name and User's Object ID in the return claim column like the screenshot below.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/forgot-password-step5.PNG\" alt-text=\"forgot password user flow step 5\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\nAt this point you have a new Azure B2C tenant with user flows for sign up / sign in, edit profile, and forgot password. In the next section we will register the API as an app under this B2C tenant.\r\n<br /><br />\r\n<h3>API App Registration</h3>\r\nThe next step is to register the API application with our new Azure B2C tenant. To do this, start by clicking on the App Registrations link under the Manage section. Then click New Registration at the top.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/select-app-registrations.PNG\" alt-text=\"select app registrations\" width=\"25%\" height=\"25%\" />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/select-new-app-registration.PNG\" alt-text=\"select new app registration\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\nFirst. provide a name for the application. Next, check the third radio button \"Accounts in any identity provider or organizational directory (for authenticating users with user flows)\" under Supported Account Types. Select Web for the Redirect URI and enter this URI: <code>https://localhost:44332/</code> If you change the ports for the application, this URI will be different. It can also be changed after the application has been created. Leave the \"Grant admin consent to openid and offline_access permissions\" checked in the Permissions section. This is required for Azure B2C. Finally, click register and your app registration will be created and you will be taken to the app overview page where we will register some APIs for the SPA to use. We'll do that next.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/register-api-app.png\" alt-text=\"register api app\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nThe next step is to expose the API endpoints for our app. Click on Expose an API under the manage section. Click Set next to the Application ID URI at the top of the page. This is the unique URI we will use to identify exposed endpoints. Microsoft defaults this to a GUID, however, if you want you're app to have more friendly endpoints, this can be changed to whatever you like such as /api. The only requirement is that it is unique across registered applications in this tenant. For the example, set it to <code>stats</code>. The full URL will be <code>https://&lt;b2c-tenant-name&gt;.onmicrosoft.com/stats</code>. Endpoints that this application exposes are called scopes. Each scope gets a name, a display name, and a description. The name is appended to the end of the URL and this becomes the endpoint that is exposed as the scope. The example application requires 2 scopes, one for read and one for write. The screenshots below add the read scope. Repeat the same process for write. Make sure the name is <code>read</code> for the read scope and <code>write</code> for the write scope. The urls need to match here and in the application configuration for it to work.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/api-expose-api.png\" alt-text=\"api expose api\" width=\"50%\" height=\"50%\" />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/edit-app-uri.png\" alt-text=\"api app uri\" width=\"50%\" height=\"50%\" />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/define-read-scope.png\" alt-text=\"define read scope\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\nWhen done, the list of exposed APIs should look like this.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/final-scopes.png\" alt-text=\"final scopes\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<h3>SPA App Registration</h3>\r\nIn addition to registering an app for the API, we also need an app registration for the SPA. Once again, click on New Registration from the Azure AD B2C Overview screen. Give it a name. Under the supported account types section select the 3rd bullet point \"Accounts in any identity provider or organizational directory (for authenticating users with user flows)\". In the redirect URI section select single-page application (SPA) from the dropdown and provide the redirect URL. The default for the example application is <code>http://localhost:6420/</code>. If you change ports in the application, this will need to be updated and can be changed after the registration is created. Finally, under Permissions, ensure \"Grant admin consent to openid and offline_access permissions\" is checked. Click register. This will take you to the app registration Overview page.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/spa-app-registration.png\" alt-text=\"spa app registration\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nThe next step is to grant API permissions to the endpoints we registered in the API application above. Click on the API Permissions link in the manage section.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/api-permissions.png\" alt-text=\"spa api permissions\" width=\"25%\" height=\"25%\" />\r\n<br /><br />\r\nThen click the Add a permission link next to the plus sign.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/add-permission-link.png\" alt-text=\"add permissions link\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nClick on My APIs and you will see a list of registered applications and can pick APIs exposed by these applications. Click the API application we configured in the previous section. This displays the read and write APIs we exposed. Select both of them and click Add permissions.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/api-list.png\" alt-text=\"api list\" width=\"75%\" height=\"75%\" />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/pick-apis.png\" alt-text=\"pick apis\" width=\"75%\" height=\"75%\" />\r\n<br /><br />\r\nThe APIs are added to the list of API permissions for this application. The final step is to grant admin access to these endpoints so our SPA can use them. After adding, the list of permissions will look like the screenshot below. Click the Grant admin consent link to grant admin consent. The warning icons will change to green check marks. If you don't see the grant link like the screenshot, you may need to refresh the page first.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/azure-b2c-authentication-with-api-and-spa/perms-list-grant-admin.png\" alt-text=\"grant admin on permissions list\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<h3>Configure API and SPA Applications</h3>\r\nThe final step is to configure the applications to use the azure b2c tenant and apps. Clone the <a href=\"https://github.com/cwl157/azure-b2c-spa\" target=\"_blank\">GitHub repository.</a> Open the web.config file located at <code>/api/TaskService/Web.config.</code> Update the app settings to match the details of your azure resources. If you named the scopes the same as above, the read scope is called <code>read</code> and the write scope is called <code>write.</code> The app settings section that needs to be changed is below. Anything with <code>--placeholder--</code> needs to be changed. The <code>--client-id--</code> placeholder needs to be replaced with the id of each application registered. This can be found from the app registrations list.\r\n<pre>\r\n<code class=\"language-xml\">\r\n&lt;appSettings&gt;\r\n    &lt;add key=\"webpages:Version\" value=\"3.0.0.0\" /&gt;\r\n    &lt;add key=\"webpages:Enabled\" value=\"false\" /&gt;\r\n    &lt;add key=\"ClientValidationEnabled\" value=\"true\" /&gt;\r\n    &lt;add key=\"UnobtrusiveJavaScriptEnabled\" value=\"true\" /&gt;\r\n    &lt;add key=\"ida:AadInstance\" value=\"https://--b2c-domain-name--.b2clogin.com/{0}/{1}/v2.0/.well-known/openid-configuration\" /&gt;\r\n    &lt;add key=\"ida:Tenant\" value=\"--b2c-domain-name--.onmicrosoft.com\" /&gt;\r\n    &lt;add key=\"ida:ClientId\" value=\"--client-id--\" /&gt;\r\n    &lt;add key=\"ida:SignUpSignInPolicyId\" value=\"--signup-signin-policy-name--\" /&gt;\r\n    &lt;!-- The following settings is used for requesting access tokens --&gt;\r\n    &lt;add key=\"api:ReadScope\" value=\"--read-scope-name--\" /&gt;\r\n    &lt;add key=\"api:WriteScope\" value=\"--write-scope-name--\" /&gt;\r\n    &lt;add key=\"rootFolder\" value=\"--local-folder-to-save-score-files--\"/&gt;\r\n&lt;/appSettings&gt;\r\n</code>\r\n</pre>\r\n<br />\r\nThe single page application settings have to be changed as well. Open <code>/client/App/config.js</code> and update the placeholders in the various variables based on your azure configuration. Like the API app, the placeholder is denoted with <code>--placeholder--.</code> The <code>b2cScopes</code> object needs to be the full url for read and write. For example, write would be <code>https://&lt;b2c-tenant-name&gt;.onmicrosoft.com/stats/write.</code> Read would be <code>https://&lt;b2c-tenant-name&gt;.onmicrosoft.com/stats/read</code>\r\n<pre>\r\n<code class=\"language-javascript\">\r\n// The current application coordinates were pre-registered in a B2C tenant.\r\nconst apiConfig = {\r\n    b2cScopes: [\"--b2c-scope-read--\", \"--b2c-scope-write--\"],\r\n    webApi: \"https://localhost:44332/api/stats/\"\r\n  };\r\n\r\n  /**\r\n * Enter here the user flows and custom policies for your B2C application\r\n * To learn more about user flows, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview\r\n * To learn more about custom policies, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-policy-overview\r\n */\r\nconst b2cPolicies = {\r\n    names: {\r\n        signUpSignIn: \"--b2c-signup-signin-policy--\",\r\n        forgotPassword: \"--b2c-password-reset-policy--\",\r\n        editProfile: \"--b2c-profile-edit-policy--\"\r\n    },\r\n    authorities: {\r\n        signUpSignIn: {\r\n            authority: \"https://--b2c-domain-name--.b2clogin.com/--b2c-domain-name--.onmicrosoft.com/--b2c-signup-signin-policy--\",\r\n        },\r\n        forgotPassword: {\r\n            authority: \"https://--b2c-domain-name--.b2clogin.com/--b2c-domain-name--.onmicrosoft.com/--b2c-password-reset-policy--\",\r\n        },\r\n        editProfile: {\r\n            authority: \"https://--b2c-domain-name--.b2clogin.com/--b2c-domain-name--.onmicrosoft.com/--b2c-profile-edit-policy--\"\r\n        }\r\n    },\r\n    authorityDomain: \"--b2c-domain-name--.b2clogin.com\"\r\n}\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation. \r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n * For more details on using MSAL.js with Azure AD B2C, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/working-with-b2c.md \r\n */\r\n\r\n const msalConfig = {\r\n    auth: {\r\n      clientId: \"--b2c-client-id--\", // This is the ONLY mandatory field; everything else is optional.\r\n      authority: b2cPolicies.authorities.signUpSignIn.authority, // Choose sign-up/sign-in user-flow as your default.\r\n      knownAuthorities: [b2cPolicies.authorityDomain], // You must identify your tenant's domain as a known authority.\r\n      redirectUri: \"http://localhost:6420\", // You must register this URI on Azure Portal/App Registration. Defaults to \"window.location.href\".\r\n    },\r\n    cache: {\r\n      cacheLocation: \"localStorage\", // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO.\r\n      storeAuthStateInCookie: false, // If you wish to store cache items in cookies as well as browser cache, set this to \"true\".\r\n    },\r\n  };\r\n  \r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit: \r\n * https://docs.microsoft.com/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\r\n */\r\nconst loginRequest = {\r\n  scopes: [\"openid\", ...apiConfig.b2cScopes],\r\n};\r\n\r\n/**\r\n * Scopes you add here will be used to request a token from Azure AD B2C to be used for accessing a protected resource.\r\n * To learn more about how to work with scopes and resources, see: \r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\r\n */\r\nconst tokenRequest = {\r\n  scopes: [...apiConfig.b2cScopes],  // e.g. [\"https://fabrikamb2c.onmicrosoft.com/helloapi/demo.read\"]\r\n  forceRefresh: false // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n};\r\n</code>\r\n</pre>\r\n<br />\r\nThe applications are read to run. Start the API application from visual studio. For the single page application, run <code>npm install</code> and <code>npm start.</code> Browse to <code>http://localhost:6420</code> to view the application. From here, you can click <code>Sign-in</code> in the upper right of the menu bar and register, sign-in or reset your password. Once signed in, you can edit the name of your user. Finally, you can play Brick Buster, a breakout inspired game. If you're signed in, you can save your current score or fetch all the scores you have saved. If anything doesn't work, the most likely reason is mis-configuration. Verify the API application has the values that correspond to the API app registration in Azure and the single page application has the values that correspond to the SPA app registration in Azure. Remember the sign-in, reset password, and edit profile policies are the same for both. Furthermore, make sure the strings that are the endpoints that were exposed in the API and added in the SPA match the strings configured the apps and the endpoints are <code>/stats/read</code> and <code>/stats/write</code>. Finally, ensure the values in the <code>apiConfig.b2cScopes</code> array in the spa config.js match the entire url of the API endpoint.\r\n<br /><br />\r\n<h3>References and Further Reading</h3>\r\nThe single page application is inspired by <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/azure/active-directory-b2c/quickstart-single-page-app\">this Microsoft quickstart guide.</a> It uses the Microsoft Authentication Library (MSAL) for javascript. More information about MSAL can be found <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-overview\">here.</a> The API is inspired by <a target=\"_blank\" href=\"https://github.com/Azure-Samples/active-directory-b2c-dotnet-webapp-and-webapi\">this Microsoft Azure B2C sample on GitHub.</a> The example uses a server side web app as the client. This example, adapts that to use a single page application. <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/azure/active-directory-b2c/code-samples\">Microsoft has a lot of documentation</a> covering a wide range of scenarios for Azure B2C.\r\n<br /><br />\r\n<h3>Conclusion</h3>\r\nIf you made it this far, you now have an Azure B2C tenant with 2 app registrations and a working single page app that can authorize to an api app. Congratulations! We covered a lot in this blog post. How to register a B2C tenant, expose APIs, grant permissions to APIs and authenticate in a single page application using the MSAL library. Azure B2C can be used to manage identity instead of implementing it yourself for a wide range of applications. For more information on Azure B2C visit <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/azure/active-directory-b2c/\">this resource.</a>","author":"Carl Layton","publishedDate":"2021-06-17T13:00:00Z","friendlyUri":"azure-b2c-authentication-with-api-and-spa","isPublished":true,"previousPostUri":"my-first-wpf-app-a-music-player-using-mvvm-pattern","previousPostTitle":"My First WPF App: A Music Player Using MVVM Pattern","nextPostUri":"use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive","nextPostTitle":"Use Azure AD and Microsoft Graph API to Manage Files in OneDrive","isFeatured":true,"tags":["Azure","Authentication","csharp","ASP .NET","Javascript"]}