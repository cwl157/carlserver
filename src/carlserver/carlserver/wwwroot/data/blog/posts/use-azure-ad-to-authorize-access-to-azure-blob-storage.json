{"id":25,"title":"Use Azure AD to Authorize Access to Azure Blob Storage","summary":"In this post, I show you how to enable authorization to Azure Blob Storage using IAM on a storage account. At the end of this post, you will understand how to leverage Azure Active Directory App Registrations, Identity Access Management, RBAC, and the C# Azure identity and storage APIs to securely access Azure blob storage containers and data.","body":"This post is part of the <a href=\"https://www.csadvent.christmas\">2021 C# Advent Calendar</a>. Please check out the other great posts as well!\r\n<br /><br />\r\nIn this post, I explain how to enable authorization to Azure Blob Storage using IAM on a storage account. At the end of this post, you will understand how to leverage Azure Active Directory App Registrations, Identity Access Management, RBAC, and the C# Azure identity and storage APIs to securely access Azure blob storage containers and data.\r\n<br /><br />\r\nThe application is a .NET 5 console application written in C# using Visual Studio 2019. An Azure subscription is also required with permissions to modify storage accounts and active directory. While it hasn't cost any money for the Azure demos I've created so far, regular Azure usage rates apply. The full application is available <a target=\"_blank\" href=\"https://github.com/cwl157/azure-storage-examples\">on GitHub.</a>\r\n<br /><br />\r\nThis application contains 3 options: create a blob container, upload a file to a blob container, and download a file from a blob container. These are secured using IAM and RBAC. The steps to achieve this are: create a new app registration in Azure AD to act as the service principal, create and configure a storage account for blob storage, configure the RBAC of the storage account for the service principal, and configure the application to use the app registration and storage account. The first step is to create the app registration and we'll do that in the next section.\r\n<br /><br />\r\n<h3>Create Azure AD App Registration to act as the Service Principal</h3>\r\nLog into the azure portal and navigate to Azure Active Directory. Click on <b>App registrations</b> from the menu on the left side.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/app-registration-menu.png\" alt-text=\"app registration menu\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\nClick <b>New registration</b> at the top of the page. Enter a name for the app registration, leave <code>Accounts in this organizational directory only (Default Directory only - Single tenant)</code> selected for the second option and you can leave the redirect URI blank. Once the information filled out, click Register at the bottom of the page.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/app-reg-config.png\" alt-text=\"app registration create page\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nThis takes you to the app registration overview page. The next step is to add a client secret that our application will use to connect to blob storage using this app. Click on <b>Certificates & secrets</b> from the left-hand navigation menu.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/client-secret-menu.png\" alt-text=\"app registration create page\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\nClick <b>Add new client secret</b> under the Client secrets section. Enter a description and when the secret should expire. Then click Add.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/new-client-secret-empty-list.png\" alt-text=\"app registration create page\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/add-client-secret.png\" alt-text=\"app registration create page\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\nAfter the secret is created, you are returned to the Certificates & Secrets page with a new entry in the Client secrets section. Be sure to copy the client secret value because we'll need it later to configure the application. This is the only time the secret is available to copy. If it's not saved now, you will have to create a new secret when we get to the section on configuring the application.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/secret-info.png\" alt-text=\"app registration create page\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<h3>Create the Storage Account</h3>\r\nThe next step is to create the storage account. As with other Azure resources, there are a number of ways to do this including the Azure portal and powershell, along with a number of options for data protection and networking. Follow <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/azure/storage/common/storage-account-create?tabs=azure-portal\"> this guide from the Microsoft documentation</a> to create a storage account. Return to this post when it's deployed and we'll setup the RBAC permissions for the service principal in the storage account in the next section.\r\n<h3>Assign RBAC to Service Principal</h3>\r\nThe third step is to assign the correct permissions to the service principal we created in step 1 to the storage account. Two permissions are required, <code>reader</code> and <code>Storage Blob Data Contributor</code>. In order for the service principal to access the storage account resource, it needs the <code>Microsoft.Storage/storageAccounts/listkeys/action</code> which is available in a number of built-in Azure roles. The role with the least permission is the <code>reader</code> role. That's why we need to apply the <code>reader</code> role as well as the <code>Storage Blob Data Contributor</code> role. For more information, see <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/azure/storage/blobs/authorize-data-operations-portal\">this Microsoft doc.</a>\r\n<br /><br />\r\nTo assign the reader role, from the storage account Overview page, click on <b>Access Control (IAM)</b> from the menu on the left side.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/access-control-from-menu.png\" alt-text=\"access control IAM from menu\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\nNext, click <b>Add</b> &gt; <b>Add role assignment</b> from the top navigation bar.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/add-role-assignment-menu.png\" alt-text=\"add role assignment menu\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nThe following description and screenshots will add the <code>reader</code> role. The same process will be followed to add the <code>Storage Blob Data Contributor</code>. First select the <b>reader</b> role from the list of built-in roles. Click <b>Next</b> to advance to the members tab.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/pick-reader-role.png\" alt-text=\"pick reader role\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nOn the Members tab, ensure the <code>User, group, or service principal</code> radio box is checked (it should be the default). Next to the Members label, click <b>+ Select members</b>. A blade opens on the right side with users listed by default. Search for the name of the AD app registration that was created in step 1. In my case that is <code>blobIamExample</code>. Click on the application and then click select.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/members-tab.png\" alt-text=\"members tab\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/select-members.png\" alt-text=\"pick members\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\nClick <b>Review + assign</b>. The review screen allows you to see which user is being assigned which role and for what scope. Click on <b>Review + assign at the bottom of the page.</b> It will redirect back to the Access Control (IAM) landing page and a task will start to add the role.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/use-azure-ad-to-authorize-access-to-azure-blob-storage/review-assign-role.png\" alt-text=\"pick members\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nThe same process will be followed to add the <code>Storage Blob Data Contributor</code> role. An important note about assigning IAM roles is it can be done at different levels. You could assign the <code>Storage Blob Data Contributor</code> role at the blob container level as well if you only want the app service principal to have contributor permissions to a specific blob container. In this case, we gave the permissions for the entire storage account. Once both roles are added, we can configure the application to use our storage account and service principal to interact with blob storage. We'll do that in the next section.\r\n<br /><br />\r\n<h3>Configure Application</h3>\r\nThe fourth step is to clone the sample application from GitHub and update the configuration values to work with your Azure AD app and storage account. Start by <a target=\"_blank\"  href=\"https://github.com/cwl157/azure-storage-examples\">cloning the repository from GitHub.</a> Update the <code>ConfigConstants.cs</code> file and change the <code>StorageUrl</code>, <code>TenantId</code>, <code>ClientId</code>, and <code>ClientSecret</code> fields to match your values from Azure. If you didn't save the <code>ClientSecret</code> from earlier you will have to create a new one from the Azure AD app registration as there is no way to find the value after it's been created. That's all you need to the run the application. Start the app from Visual Studio to try it out! In the next sections, I'll dig into each function and explain the code.\r\n<h3>Authenticating the BlobServiceClient</h3>\r\nThe <code>BlobServiceClient</code> class is part of the Azure storage .NET API and is used to access and manipulate Azure storage accounts and containers. One of the constructor overloads takes an instance of a <code>TokenCredential</code> implementation. The <code>TokenCredential</code> class is abstract, provides an OAuth token, and offers a number of implementations to handle different authentication scenarios. In this case, we use the <code>Azure.Identity.ClientSecretCredential</code> implementation.\r\n<pre>\r\n<code class=\"language-csharp\">\r\nClientSecretCredential cred = new ClientSecretCredential(ConfigConstants.TenantId, ConfigConstants.ClientId, ConfigConstants.ClientSecret);\r\nBlobServiceClient blobServiceClient = new BlobServiceClient(new Uri(ConfigConstants.StorageUrl), cred);\r\n</code>\r\n</pre>\r\nThe <code>Azure.Identity.ClientSecretCredential</code> implementation uses a client secret generated from an app registration to authenticate to blob storage. We pass in the Azure AD tenant ID, app client ID, and app secret we generated in the sections above. The RBAC settings of the service principal on the storage account handles authorization. Other <code>TokenCredential</code> implementations can be used to handle other authentication scenarios. For example, the <code>Azure.Identity.DefaultAzureCredential</code> will try a number of different credential types. The <code>Azure.Identity.InteractiveBrowserCredential</code> will open a web browser and prompt for a user login to authenticate the <code>BlobServiceClient</code>. More information about the <code>TokenCredential</code> class and it's implementations is available <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/dotnet/api/azure.core.tokencredential?view=azure-dotnet\">in this Microsoft doc.</a>\r\n<br /><br />\r\n<h3>Create Container, Upload File, Download File</h3>\r\nThe application supports 3 functions, create blob container, upload a file, and download a file. First, I'll go over creating the container. This takes a blob container name provided by the user and calls the <code>CreateBlobContainerAsync</code> method to create the container. If the app registration, RBAC, and config settings are setup correctly, the container will be created and available when browsing containers in the azure portal. The most common error I saw was permissions related because I didn't have the RBAC defined correctly. If this is the case, you will receive an <code>AuthorizationFailure</code> error. The other common error is mixing up the config values in <code>ConfigConstants.cs</code>.\r\n<pre>\r\n<code class=\"language-csharp\">\r\nConsole.WriteLine(\"Create blob container\");\r\nConsole.Write(\"Enter blob container name: \");\r\nstring containerName = Console.ReadLine();\r\n\r\ntry\r\n{\r\n    // Create the container and return a container client object\r\n    BlobContainerClient containerClient = await blobServiceClient.CreateBlobContainerAsync(containerName.ToLower());\r\n}\r\ncatch (Exception ex)\r\n{\r\n    Console.WriteLine(ex.Message);\r\n}\r\n</code>\r\n</pre>\r\nThe second function is uploading a file. This takes a local file path and a blob container name provided by the user and uploads the file to a new blob in the blob container. The code for this function is below.\r\n<pre>\r\n<code class=\"language-csharp\">\r\nConsole.WriteLine(\"Upload a file to blob storage\");\r\nConsole.Write(\"Enter full local file path: \");\r\nstring localFilePath = Console.ReadLine();\r\nConsole.Write(\"Enter blob container name: \");\r\nstring containerName = Console.ReadLine();\r\n\r\ntry\r\n{\r\n    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName.ToLower());\r\n    // Get a reference to a blob\r\n    string fileName = Path.GetFileName(localFilePath);\r\n    BlobClient blobClient = containerClient.GetBlobClient(fileName);\r\n\r\n    Console.WriteLine(\"Uploading to Blob storage as blob:\\n\\t {0}\\n\", blobClient.Uri);\r\n\r\n    // Upload data from the local file\r\n    await blobClient.UploadAsync(localFilePath, true);\r\n    Console.WriteLine(\"Upload Complete\");\r\n}\r\ncatch (Exception ex)\r\n{\r\n    Console.WriteLine(ex.Message);\r\n}\r\n</code>\r\n</pre>\r\nThe final function is downloading a file from blob storage. This takes a container name, a blob name, and a local file path to save the file and calls <code>DownloadToAsync</code> to download the blob.\r\n<pre>\r\n<code class=\"language-csharp\">\r\nConsole.WriteLine(\"Download Blob\");\r\nConsole.Write(\"Container name: \");\r\nstring containerName = Console.ReadLine();\r\n\r\nConsole.Write(\"Blob name: \");\r\nstring blobName = Console.ReadLine();\r\n\r\nConsole.Write(\"Full Destination Path: \");\r\nstring destinationPath = Console.ReadLine();\r\nstring localFilePath = destinationPath + \"\\\\\" + blobName;\r\n\r\ntry\r\n{\r\n    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName.ToLower());\r\n    BlobClient blobClient = containerClient.GetBlobClient(blobName);\r\n\r\n    Console.WriteLine(\"\\nDownloading blob to\\n\\t{0}\\n\", localFilePath);\r\n\r\n    // Download the blob's contents and save it to a file\r\n    await blobClient.DownloadToAsync(localFilePath);\r\n    Console.WriteLine(\"Download Complete\");\r\n}\r\ncatch (Exception ex)\r\n{\r\n    Console.WriteLine(ex.Message);\r\n}\r\n</code>\r\n</pre>\r\n<h3>Conclusion</h3>\r\nIn this post I explained how to setup an Azure AD app registration and use RBAC to secure blobs and containers in a storage account. Then I explained parts of the <code>Azure.Identity</code> and <code>Azure.Storage</code> APIs for authenticating and manipulating blob containers and data using C#. Here are some additional resources from Microsoft on using the Blob Storage and Identity client libraries in C#: <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-dotnet\">Quickstart: Azure Blob Storage client library v12 for .NET</a>, <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/azure/storage/blobs/authorize-managed-identity\">Authorize access to blob data with managed identities for Azure resources</a>, <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/azure/storage/blobs/authorize-data-operations-portal\">Choose how to authorize access to blob data in the Azure portal.</a> Finally, head over to the <a href=\"https://www.csadvent.christmas\">2021 C# Advent Calendar</a> to see all the great posts this year!","author":"Carl Layton","publishedDate":"2021-12-09T07:00:00Z","friendlyUri":"use-azure-ad-to-authorize-access-to-azure-blob-storage","isPublished":true,"previousPostUri":"use-azure-ad-and-microsoft-graph-api-to-manage-files-in-onedrive","previousPostTitle":"Use Azure AD and Microsoft Graph API to Manage Files in OneDrive","nextPostUri":null,"nextPostTitle":null,"isFeatured":true,"tags":["azure","authentication","csharp","dotnet","storage"]}