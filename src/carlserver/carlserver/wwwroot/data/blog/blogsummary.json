[{"id":1,"title":"Using C# dynamic Keyword To Replace Data Transfer Objects","summary":"For this post I'm going to show 3 examples of using the C# dynamic keyword when deserializing input data instead of using data transfer objects. Many modern applications need to accept data from a variety of sources. Often times we create data transfer objects just to handle requests and responses to and from the data source. Using dynamic in C# reduces the need for data transfer objects and keeps the logic that depends on the 3rd party data source contained to one place.","body":"","author":"Carl Layton","publishedDate":"2017-12-10T06:00:00Z","friendlyUri":"using-c#-dynamic-keyword-to-replace-data-transfer-objects","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":true,"tags":["csharp","ASP .NET"]},{"id":2,"title":"Using Javascript Promises for Application Logic in an AngularJS Service","summary":"The example in this post shows how the $q service can be used to harness the power of javascript promises to perform application logic in an AngularJS application. This can help keep application code organized and separate responsibilities among controllers and services.","body":"","author":"Carl Layton","publishedDate":"2017-12-17T12:00:00Z","friendlyUri":"using-javascript-promises-for-application-logic-in-an-angularjs-service","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["AngularJS","Javascript"]},{"id":3,"title":"AngularJS Route Resolve Example","summary":"The resolve property is attached to a route in AngularJS to provide a list of dependencies for the route. The data from this list is injected into the route controller and if any of the dependencies are promises, the promise will be resolved before the controller is instantiated. This helps keep the controller clean because any data the controller depends on can be injected into it instead of the controller retrieving that data itself. This post will go through an example of using the resolve property and show the differences between using a resolve property versus putting the fetch code in the controller directly.","body":"","author":"Carl Layton","publishedDate":"2018-01-10T13:30:00Z","friendlyUri":"angularjs-route-resolve-example","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["AngularJS","Javascript"]},{"id":4,"title":"AngularJS Route Resolve Failed Promise Example","summary":"In the <a href=\"/blog/post/angularjs-route-resolve-example\">previous post</a> I looked at how the resolve property of an AngularJS route can be used to pass dependencies to a controller. In that example the resolve property in the route configuration called a service that returned a promise. The resolve property then passes the result of the promise to the controller when it is instantiated. The question that came up is what if there is an error and the promise is rejected instead of resolved? That's what I'll be answering in this post.","body":"","author":"Carl Layton","publishedDate":"2018-01-18T06:00:00Z","friendlyUri":"angularjs-route-resolve-failed-promise-example","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["AngularJS","Javascript"]},{"id":5,"title":"Create Fake Data Using Json Schema Faker","summary":"In this post I will look at how to create fake data using Json Schema Faker and faker.js. Json Schema Faker is a node package that uses fake data generators and a schema defined in JSON to create fake data. Any application that handles data in the JSON format can use this for testing, prototyping, or general development. I will cover how to create a json schema and how to generate mock data for it using Json Schema Faker. This tutorial assumes basic knowledge of javacsript, NodeJS, and NPM and that NodeJS and NPM are installed.","body":"","author":"Carl Layton","publishedDate":"2018-03-25T16:30:00Z","friendlyUri":"create-fake-data-using-json-schema-faker","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["Javascript","json","Mock data"]},{"id":6,"title":"Applying The Strategy Pattern To Vary Data Access Methods In C#","summary":"The strategy pattern is a design pattern that allows for multiple implementations, or strategies, to be used interchangeably. A data access layer can make good use of the strategy pattern because it can abstract out the implementation of the actual data access mechanism from the consumer of the data access layer. In this post, I'll look at an example that uses the strategy pattern to implement 2 different data access methods and switching between them is as easy as updating the dependency injector configuration.","body":"","author":"Carl Layton","publishedDate":"2018-04-04T11:30:00Z","friendlyUri":"applying-the-strategy-pattern-to-vary-data-access-methods-in-csharp","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["csharp","ASP .NET core MVC","Design patterns","Strategy pattern"]},{"id":7,"title":"Installing posh-git - A PowerShell Environment for Git","summary":"In this post, I detail the basic steps to install posh-git, a powershell module that integrates git into PowerShell. This makes it easier to work with git from any PowerShell session.","body":"","author":"Carl Layton","publishedDate":"2018-04-27T12:15:00Z","friendlyUri":"installing-posh-git-a-powershell-environment-for-git","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["Git","SCM","PowerShell"]},{"id":8,"title":"Setup libGDX Project In Android Studio","summary":"In this post, I walk through the steps to create a libGDX project and get it running in Android Studio 3. There are a few prompts along the way that took me several tries at different combinations before I found the one  that works so I decided to document it here. This post assumes Android Studio version 3.0.1, the Android SDK, and Java are already installed.","body":"","author":"Carl Layton","publishedDate":"2018-05-10T00:00:00Z","friendlyUri":"setup-libgdx-project-in-android-studio","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["libGDX","Android","Android Studio","Java"]},{"id":9,"title":"ASP .NET Core MVC Dependency Injection Overview","summary":"ASP .NET Core MVC comes with dependency injection built in and the options available will cover most use cases. In this post I will summarize what is available and how to configure and use it. This post does not explain the concept of dependency injection or why it is a helpful practice to follow but how it is integrated into the ASP .NET Core MVC framework.","body":"","author":"Carl Layton","publishedDate":"2018-07-24T01:00:00Z","friendlyUri":"asp-dotnet-core-mvc-dependency-injection-overview","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["csharp","ASP .NET core MVC","Dependency Injection"]},{"id":10,"title":"Use IdentityServer to Implement a Custom Sitefinity Identity Provider","summary":"In this post, I detail the steps to implement a custom external identity provider in Sitefinity. At the end, you will have a Sitefinity instance configured as a client to a separate IdentityServer application. When a user authenticates to IdentityServer the user will be authenticated to Sitefinity and assigned the 'User' role. This uses the OpenID Connect standard. I do not assume there is a pre-configured IdentityServer application already running. I will cover both the IdentityServer setup and Sitefinity setup. This post uses Sitefinity 11 and IdentityServer 4. The software required for this tutorial is Visual Studio 2017, SQL Server Express, .NET framework 4.7.1, dotnet core 2.0, and git (Optional).","body":"","author":"Carl Layton","publishedDate":"2018-08-15T13:30:00Z","friendlyUri":"use-identityserver-to-implement-a-custom-sitefinity-identity-provider","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":true,"tags":["IdentityServer","Sitefinity","ASP .NET core MVC","Authentication","Identity"]},{"id":11,"title":"Create Custom Password Hasher for ASP .NET Core Identity","summary":"In this post, I will look at how to extend the ASP .NET Core Identity membership system to use a custom class for hashing passwords. ASP .NET Core Identity is very extendable and extending it is a good way to get a better understanding of how the system works. We can customize it by providing new implementations to its interfaces. As with any custom security implementation, customization should be done with care and be backed by good reasons. That being said, lets have some fun. This tutorial requires Visual Studio 2017, dotnet core 2.0, and LocalDb.","body":"","author":"Carl Layton","publishedDate":"2018-09-06T01:00:00Z","friendlyUri":"create-custom-password-hasher-for-aspnet-core-identity","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["ASP .NET Core","Authentication","csharp","Identity"]},{"id":12,"title":"Create Custom User Store for ASP .NET Core Identity","summary":"In this post, I will look at how to extend the ASP .NET Core Identity membership system to use a custom user store. This will store users in memory and not a database. This would not be useful in a production application because the list of users resets every time the application is started. However, by customizing ASP .NET Core Identity, we gain a better understanding of the components and how they fit together. This tutorial requires Visual Studio 2017 and dotnet core 2.0.","body":"","author":"Carl Layton","publishedDate":"2018-11-01T12:00:00Z","friendlyUri":"create-custom-user-store-for-aspnet-core-identity","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["ASP .NET Core","Authentication","csharp","Identity"]},{"id":13,"title":"Create Formatted Text Files With csvhelper","summary":"In this post, I will show some examples for reading and writing text files using csvhelper. Csvhelper is a simple and fast library primarily used for writing csv files. Additionally, it can be configured to use any character as a delimiter. It is available via NuGet. I have used csvhelper in a number of projects for data export features or saving preferences, etc.","body":"","author":"Carl Layton","publishedDate":"2018-12-08T06:00:00Z","friendlyUri":"create-formatted-text-files-with-csvhelper","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["csharp"]},{"id":14,"title":"How To Create Directive Specific Styles In AngularJS","summary":"In this post, I show how to leverage css selectors to make styles specific to an AngularJS controller or directive. The technique seems obvious once it's pointed out but it's something I never thought of until recently. Hopefully this can also help others better organize css in their AngularJS applications.","body":"","author":"Carl Layton","publishedDate":"2019-02-23T06:00:00Z","friendlyUri":"how-to-create-directive-specific-styles-in-angularjs","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":false,"tags":["AngularJS","Javascript","CSS","Frontend Dev"]},{"id":15,"title":"Using Netlify Identity Widget In An Angular Application","summary":"Netlify is a platform for hosting frontend web applications. It also supports a bunch of server-side features like identity, lambda functions, form submissions, or custom microservices. In this post, I show an example of using the identity service in an Angular application to authenticate users. This post assumes the reader is familiar with the structure of an Angular application including routing, components, and services but you don't need to be an expert. It also requires npm and the Angular cli to run locally. ","body":"","author":"Carl Layton","publishedDate":"2019-04-08T10:45:00Z","friendlyUri":"using-netlify-identity-widget-in-an-angular-application","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":true,"tags":["Angular","Netlify","Identity"]},{"id":16,"title":"Create a Raspberry Pi Music Player with RuneAudio","summary":"In this post, I detail how to turn a Raspberry Pi into a music player using RuneAudio to stream your music collection over your local network. I'll also show how to control playback from a computer, or android phone or tablet. This post uses a raspberry pi 3, RuneAudio 0.4 (build: beta-20160313) and a windows 10 PC that contains the music collection.","body":"","author":"Carl Layton","publishedDate":"2019-05-26T12:30:00Z","friendlyUri":"create-a-raspberry-pi-music-player-with-runeaudio","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":true,"tags":["Raspberry Pi"]},{"id":17,"title":"Use Dropbox for Persistent Storage with an Angular Application","summary":"In this post, I create an Angular application that uses Dropbox for persistent storage. I start with creating a regular Angular app using the Angular CLI and then add Dropbox integration to it. At the end, you will have a working example of Dropbox integration with an Angular app. ","body":"","author":"Carl Layton","publishedDate":"2019-10-11T01:30:00Z","friendlyUri":"use-dropbox-for-persistent-storage-with-an-angular-application","isPublished":true,"previousPostUri":null,"previousPostTitle":null,"nextPostUri":null,"nextPostTitle":null,"isFeatured":true,"tags":["Angular","Javascript","Dropbox"]}]