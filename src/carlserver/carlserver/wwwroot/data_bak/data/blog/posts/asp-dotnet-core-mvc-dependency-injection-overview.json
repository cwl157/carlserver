{"id":9,"title":"ASP .NET Core MVC Dependency Injection Overview","summary":"ASP .NET Core MVC comes with dependency injection built in and the options available will cover most use cases. In this post I will summarize what is available and how to configure and use it. This post does not explain the concept of dependency injection or why it is a helpful practice to follow but how it is integrated into the ASP .NET Core MVC framework.","body":"ASP .NET Core MVC comes with dependency injection built in and the options available will cover most use cases. In this post I will summarize what is available in the framework and how to use it.\r\n<br /><br />\r\nI usually did not use dependency injection in my projects in previous versions of the MVC framework. The main reason why is previous versions didn't support dependency injection out of the box and required a 3rd party library like ninject. I thought the projects I worked on would not benefit from it enough to justify another 3rd party library to learn and dependency to keep track of. With ASP .NET Core MVC, that has all changed. Dependency injection is now built in and can be configured directly from the <code class=\"language-csharp\">ConfigureServices</code> method in the <code class=\"language-csharp\">Startup</code> class through a series of extension methods. It is also available throughout the framework. This includes custom attributes, filters, view components, etc, or POCOs that handle any custom business logic. This makes dependency management a better fit than in previous versions of the framework.\r\n<br /><br />\r\nThere are 3 main variations for adding dependencies: scoped, transient, and singleton. Scoped will use the same instance for a single web request, transient will create a new instance each time a dependency is needed, and singleton creates a single instance for the entire application. Each of these has several overloads.The table below details the common ones.\r\n<table class=\"table table-striped\">\r\n<thead>\r\n<tr>\r\n<th scope=\"col\">Extension Method</th>\r\n<th scope=\"col\">Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>AddScoped&lt;TImplementation&gt;(IServiceCollection)</td>\r\n<td>Adds a scoped service of type TImplementation to the specified IServiceCollection.</td>\r\n</tr>\r\n<tr>\r\n<td>AddScoped&lt;TService,TImplementation&gt;(IServiceCollection)</td>\r\n<td>Adds a scoped service of type TService with an implementation of type TImplementation to the specified IServiceCollection</td>\r\n</tr>\r\n<tr>\r\n<td>AddScoped&lt;TImplementation&gt;(IServiceCollection, Func&lt;IServiceProvider,TService&gt;)</td>\r\n<td>Adds a scoped service of type TImplementation to the specified IServiceCollection. The instance is provided by the factory specified by the Func delegate argument</td>\r\n</tr>\r\n<tr>\r\n<td>AddScoped&lt;TService,TImplementation&gt;(IServiceCollection, Func&lt;IServiceProvider,TImplementation&gt;)</td>\r\n<td>Adds a scoped service of type TService with an implementation of type TImplementation to the specified IServiceCollection. The instance is provided by the factory specified by the Func delegate argument</td>\r\n</tr>\r\n<tr>\r\n<td>AddSingleton&lt;TImplementation&gt;(IServiceCollection)</td>\r\n<td>Adds a singleton service of type TImplementation to the specified IServiceCollection.</td>\r\n</tr>\r\n<tr>\r\n<td>AddSingleton&lt;TService,TImplementation&gt;(IServiceCollection)</td>\r\n<td>Adds a singleton service of type TService with an implementation of type TImplementation to the specified IServiceCollection</td>\r\n</tr>\r\n<tr>\r\n<td>AddSingleton&lt;TImplementation&gt;(IServiceCollection, Func&lt;IServiceProvider,TService&gt;)</td>\r\n<td>Adds a singleton service of type TImplementation to the specified IServiceCollection. The instance is provided by the factory specified by the Func delegate argument</td>\r\n</tr>\r\n<tr>\r\n<td>AddSingleton&lt;TService,TImplementation&gt;(IServiceCollection, Func&lt;IServiceProvider,TImplementation&gt;)</td>\r\n<td>Adds a singleton service of type TService with an implementation of type TImplementation to the specified IServiceCollection. The instance is provided by the factory specified by the Func delegate argument</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>AddTransient&lt;TImplementation&gt;(IServiceCollection)</td>\r\n<td>Adds a transient service of type TImplementation to the specified IServiceCollection.</td>\r\n</tr>\r\n<tr>\r\n<td>AddTransient&lt;TService,TImplementation&gt;(IServiceCollection)</td>\r\n<td>Adds a transient service of type TService with an implementation of type TImplementation to the specified IServiceCollection</td>\r\n</tr>\r\n<tr>\r\n<td>AddTransient&lt;TImplementation&gt;(IServiceCollection, Func&lt;IServiceProvider,TService&gt;)</td>\r\n<td>Adds a transient service of type TImplementation to the specified IServiceCollection. The instance is provided by the factory specified by the Func delegate argument</td>\r\n</tr>\r\n<tr>\r\n<td>AddTransient&lt;TService,TImplementation&gt;(IServiceCollection, Func&lt;IServiceProvider,TImplementation&gt;)</td>\r\n<td>Adds a transient service of type TService with an implementation of type TImplementation to the specified IServiceCollection. The instance is provided by the factory specified by the Func delegate argument</td>\r\n</tr>\r\n\r\n</tbody>\r\n</table>\r\n\r\nThe complete list of ServiceCollection extension methods including the ones related to dependency injection can be found <a target=\"_blank\" href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollection?view=aspnetcore-2.0#extension-methods\">on the microsoft docs.</a>\r\n<br /><br />\r\nThis list covers all common use cases and will meet the requirements for most projects. I have setup a simple project that shows an example of a singleton, a transient, and a scoped dependency. The full source code can be found on <a target=\"_blank\" href=\"https://github.com/cwl157/asp-net-core-dependency-injection-example\">GitHub.</a>\r\n<br /><br />\r\nThe sample application shows a list of books with the ability to add a book. It also keeps track of the total number of pages and tracks each method visited per request.\r\n<br />\r\n<img src=\"/data/blog/posts/img/asp-dotnet-core-mvc-dependency-injection-overview/homepage.PNG\" alt-text=\"folder structure\" width=\"50%\" height=\"50%\" />\r\n<br />\r\n<img src=\"/data/blog/posts/img/asp-dotnet-core-mvc-dependency-injection-overview/AddBook.PNG\" alt-text=\"folder structure\" width=\"33%\" height=\"33%\" />\r\n<br />\r\n<img src=\"/data/blog/posts/img/asp-dotnet-core-mvc-dependency-injection-overview/homepageAfterAdd.PNG\" alt-text=\"folder structure\" width=\"50%\" height=\"50%\" />\r\n<br />\r\n<img src=\"/data/blog/posts/img/asp-dotnet-core-mvc-dependency-injection-overview/totalPagesView.PNG\" alt-text=\"folder structure\" width=\"33%\" height=\"33%\" />\r\n<br />\r\n<img src=\"/data/blog/posts/img/asp-dotnet-core-mvc-dependency-injection-overview/requestTracker.PNG\" alt-text=\"folder structure\" width=\"33%\" height=\"33%\" />\r\n<br />\r\n<br /><br />\r\nI am not going to go through every detail of the example application but just highlight the parts that use dependency injection. The list of books is stored in memory so it will persist throughout the life of the application. If the application is restarted, the list resets. For this type of behavior, I inject a singleton. Book storage can also have multiple implementations so I defined an interface for it. <code class=\"language-csharp\">public class InMemoryBookData : IBookData</code>. The application also features a service named <code class=\"language-csharp\">PagesCounter</code> that sums the total number of pages in all books. I'm using the term \"service\" here to mean a generic class containing business logic. This doesn't need to persist state across requests so it is a transient dependency. The third feature tracks each method called per request titled <code class=\"language-chsarp\">RequestTrackerData</code>. Because it needs to track each method in a request, it is a scoped dependency. This allows the same instance to be injected into multiple classes with a fresh instance for each request. As mentioned above, dependency injection is configured in the <code class=\"language-csharp\">Startup.ConfigureServices</code> method.\r\n<pre>\r\n<code class=\"language-csharp\">\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n     services.AddSingleton&lt;IBookData, InMemoryBookData&gt;();\r\n     services.AddScoped&lt;RequestTrackerData&gt;();\r\n     services.AddTransient&lt;ICounter, PagesCounter&gt;();\r\n     services.AddMvc();\r\n}\r\n</code>\r\n</pre>\r\n<br />\r\n<br />\r\nDependency injection happens through constructor injection. The <code class=\"language-csharp\">HomeController</code> needs <code class=\"language-csharp\">IBookData</code>, <code class=\"language-csharp\">RequestTrackerData</code>, and <code class=\"language-csharp\">ICounter</code> for the <code class=\"language-csharp\">PagesCounter</code> so all 3 are injected and the framework manages what instance is actually passed in.\r\n<pre>\r\n<code class=\"language-csharp\">\r\npublic HomeController(IBookData b, RequestTrackerData tr, ICounter pc)\r\n{\r\n     _bda = b;\r\n     _tracker = tr;\r\n     _pageCounter = pc;\r\n}\r\n</code>\r\n</pre>\r\n<br /><br />\r\nThis is the basic theory of dependency injection regardless of what library or framework is used. However, the ASP .NET Core MVC framework makes managing dependencies better than previous versions. Dependency injection is supported throughout the MVC framework as well. This includes custom attributes, filters, view components, or POCOs that handle any custom business logic. It can all take advantage of the same dependency injection configuration. Browse through the <a href=\"https://github.com/cwl157/asp-net-core-dependency-injection-example\">example on GitHub</a> to see a complete working project. I now use dependency injection throughout my ASP .NET Core MVC applications and find it easier to implement compared to instantiating instances directly in constructors like I used to do.","author":"Carl Layton","publishedDate":"2018-07-24T01:00:00Z","friendlyUri":"asp-dotnet-core-mvc-dependency-injection-overview","isPublished":true,"previousPostUri":"setup-libgdx-project-in-android-studio","previousPostTitle":"Setup libGDX Project In Android Studio","nextPostUri":"use-identityserver-to-implement-a-custom-sitefinity-identity-provider","nextPostTitle":"Use IdentityServer to Implement a Custom Sitefinity Identity Provider","tags":["csharp","ASP .NET core MVC","Dependency Injection"]}