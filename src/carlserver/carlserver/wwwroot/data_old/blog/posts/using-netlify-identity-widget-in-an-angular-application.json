{"id":15,"title":"Using Netlify Identity Widget In An Angular Application","summary":"Netlify is a platform for hosting frontend web applications. It also supports a bunch of server-side features like identity, lambda functions, form submissions, or custom microservices. In this post, I show an example of using the identity service in an Angular application to authenticate users. This post assumes the reader is familiar with the structure of an Angular application including routing, components, and services but you don't need to be an expert. It also requires npm and the Angular cli to run locally. ","body":"<a target=\"_blank\" href=\"https://www.netlify.com/\">Netlify</a> is a platform for hosting frontend web applications. It integrates with GitHub and allows for continuous integration. It also supports a bunch of server-side features like identity, lambda functions, form submissions, or custom microservices. This blog is hosted on Netlify as a single page application using AngularJS. This post will show an example of using the identity service in an Angular application to authenticate users. There is a <a target=\"_blank\" href=\"https://netlify-identity-angular.netlify.com/app/\">live demo</a> and the complete source code is available <a target=\"_blank\" href=\"https://github.com/cwl157/netlify-identity-widget-ex-angular\">on GitHub</a>. This post assumes the reader is familiar with the structure of an Angular application including routing, components, and services but you don't need to be an expert. It also requires npm and the Angular cli to run locally.\r\n<br /><br />\r\n<h3>The Netlify Identity Widget</h3>\r\nNetlify provides a widget that integrates with their identity service.  The goal of this example is to use the identity widget out of the box to show login, logout, sign up, confirm email, and password recovery. Below are a couple screenshots of the widget.\r\n<img src=\"/data/blog/posts/img/using-netlify-identity-widget-in-an-angular-application/widget_login.PNG\" style=\"width:33%; padding-right:5px;\" />\r\n<img src=\"/data/blog/posts/img/using-netlify-identity-widget-in-an-angular-application/widget_signup.PNG\" style=\"width:33%;\" />\r\n<br /> <br />\r\nWhen the netlify identity widget loads on a page, it attaches itself to the window object as a variable named <code>netlifyIdentity</code>. Through javascript, we can open and close the widget, login, logout, and handle events. The supported events include init, login, logout, open, close, and error.\r\n<br /><br />\r\n<h3>The Angular Application</h3>\r\nThe example application was created with the Angular cli and written in typescript. I created a wrapper angular service around the <code>netlifyIdentity</code> object named <code>netlifyIdentity.service.ts</code> . There are typings but I didn't want to introduce that dependency. I added the line <code class=\"language-typescript\">declare var netlifyIdentity: any;</code> below the import statements. Then in the constructor of the service class I use the <code class=\"language-typescript\">netlifyIdentity.on</code> function to specify callbacks for each of the events. I also added a <code class=\"language-typescript\">get()</code> function that returns the netlifyIdentity object so components and other services can use it. The full <code>netlifyIdentity.service.ts</code> implementation is below.\r\n<pre>\r\n<code class=\"language-typescript\">\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\ndeclare var netlifyIdentity: any;\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n  })\r\n\r\nexport class NetlifyIdentityService {\r\n    constructor(router: Router) {\r\n      netlifyIdentity.init();\r\n      // Bind to events\r\n      netlifyIdentity.on('init', function(user) {\r\n        console.log('init', user)\r\n      });\r\n\r\n      netlifyIdentity.on('login', function(user) {   \r\n        console.log('current user', netlifyIdentity.currentUser());\r\n        netlifyIdentity.close();\r\n      });\r\n\r\n      netlifyIdentity.on('logout', function() {\r\n        console.log('Logged out'); \r\n        netlifyIdentity.close();\r\n        router.navigateByUrl('/');\r\n      });\r\n\r\n      netlifyIdentity.on('error', function(err) {\r\n        console.error('Error', err)\r\n      }); \r\n\r\n      netlifyIdentity.on('open', function() {\r\n        console.log('Widget opened')\r\n      });\r\n\r\n      netlifyIdentity.on('close', function() {\r\n        console.log('Widget closed');\r\n      });\r\n    }\r\n    \r\n    get(): any {\r\n        return netlifyIdentity;\r\n    }\r\n  }\r\n</code>\r\n</pre>\r\n<br />\r\nThe application consists of 4 components, the home page, a public component, a protected component, and a navigation component. Angular routing is used to route to the public and protected components. The route to the protected component uses a route guard to check the object returned by <code class=\"language-typescript\">netlifyIdentity.currentUser()</code> to see if someone is logged in. If someone is logged in, the object contains information about the current user, like their email address. If not, it is null. The route guard will display a javascript alert message and prevent navigation if the object is null.\r\n<br />\r\n<img src=\"/data/blog/posts/img/using-netlify-identity-widget-in-an-angular-application/protectedAlert.PNG\" style=\"width:50%;\" />\r\n<br /><br  />\r\n<img src=\"/data/blog/posts/img/using-netlify-identity-widget-in-an-angular-application/navbar.PNG\" style=\"width:75%;\" />\r\n<br />\r\nThe navigation component is called <code>nav.component.ts</code> and is responsible for the navigation bar. It contains links for the public route, the protected route, and a login link. When no one is logged in the link says \"Login / Sign Up\". When someone is logged in their email is displayed with a \"Logout\" link next to it. It also uses <code class=\"language-typescript\">netlifyIdentity.currentUser()</code> to determine if someone is logged in. Additionally, the nav component uses the <code>netlifyIdentity</code> wrapper service to open the widget or logout the current user. The typescript functions for those are below.\r\n<pre>\r\n<code class=\"language-typescript\">\r\nopenModal(): void {\r\n    console.log(\"open modal\");\r\n    this.netlifyService.get().open();\r\n}\r\n\r\nlogout(): void {\r\n    console.log(\"Logout\");\r\n    this.netlifyService.get().logout();\r\n}\r\n</code>\r\n</pre>\r\n<br />\r\n<h3>Handling Email Confirmation and Password Reset</h3>\r\nThe netlify identity widget handles email confirmation when a user first signs up and password recovery from the forgot password link within the widget. In both cases, Netlify sends the user an email with a link that points back to the root of the site. The link contains a special hash that helps to confirm the user or reset the password. When index.html loads, the netlify identity widget pops up automatically for the user to complete the requested action. That happens as default functionality of the widget. I found this behavior tricky to handle in an angular application because as soon as the index.html file is loaded, Angular takes over and the widget doesn't open for the user to complete the action. I handled this by having 2 index files. <code>index.html</code> is the default home page of the website and <code>index_app.html</code> is the home page of the angular application. The root directive for the angular app goes in index_app.html and the base url is <code>/app</code>. The index.html file doesn't have any angular dependencies but loads the identity widget. Initially, it looks for either the recovery or confirmation hashes and if it doesn't find one, redirects to <code>/app</code> and index_app.html loads. If it finds one, it doesn't do anything and the base widget behavior takes over and the widget opens. When the widget is closed, it's assumed the user is done doing whatever they needed to do with the widget on the root of the site, so it redirects to /app and now the user is in the angular application. I don't know if it's the best method and whether it will work for you depends on the specifics of the application. Below are the <code>index.html</code> and <code>index_app.html</code> files for comparison.\r\n<br /><br />\r\nindex.html\r\n<pre>\r\n<code class=\"language-html\">\r\n&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=\"utf-8\"&gt;\r\n  \r\n   &lt;!-- include the widget --&gt;\r\n   &lt;script type=\"text/javascript\" src=\"https://identity.netlify.com/v1/netlify-identity-widget.js\"&gt;&lt;/script&gt;\r\n\r\n  &lt;title&gt;NetlifyIdentityWidgetEx&lt;/title&gt;\r\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\r\n  &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n   &lt;script&gt;\r\n      console.log(top.window.location.hash);\r\n      if (top.window.location.hash.indexOf(\"recovery_token=\") === -1 && top.window.location.hash.indexOf(\"confirmation_token\") === -1) {\r\n         top.window.location = \"/app\";\r\n      }\r\n\r\n      netlifyIdentity.on('close', function() {\r\n        console.log('Widget closed');\r\n        window.location = \"/app\";\r\n      });\r\n  &lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code>\r\n</pre>\r\n<br />\r\nindex_app.html\r\n<pre>\r\n<code class=\"language-html\">\r\n&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=\"utf-8\"&gt;\r\n  &lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"&gt;\r\n\r\n  &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n  &lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\r\n\r\n  &lt;!-- include the widget --&gt;\r\n   &lt;script type=\"text/javascript\" src=\"https://identity.netlify.com/v1/netlify-identity-widget.js\"&gt;&lt;/script&gt;\r\n\r\n  &lt;title&gt;NetlifyIdentityWidgetEx&lt;/title&gt;\r\n  &lt;base href=\"/app\"&gt;\r\n\r\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\r\n  &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n  &lt;cl-app-root&gt;&lt;/cl-app-root&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code>\r\n</pre>\r\n<br />\r\n<h3>Conclusion</h3>\r\nIn conclusion, this is one example of using the netlify identity widget in an angular application. We created a wrapper angular service for the netlify identity javascript object and used that in the angular components and services. The angular application is at <code>/app</code> and uses <code>index_app.html</code>. The default <code>index.html</code> is used to handle special netlify identity widget functionality like reset password and confirm user and redirects to <code>index_app.html</code>. Check out <a target=_\"blank\" href=\"https://netlify-identity-angular.netlify.com/app/\">the live demo</a> and the complete source code for this example is <a target=\"_blank\" href=\"https://github.com/cwl157/netlify-identity-widget-ex-angular\">available on GitHub</a>","author":"Carl Layton","publishedDate":"2019-04-08T10:45:00Z","friendlyUri":"using-netlify-identity-widget-in-an-angular-application","isPublished":true,"previousPostUri":"how-to-create-directive-specific-styles-in-angularjs","previousPostTitle":"How To Create Directive Specific Styles In AngularJS","nextPostUri":"create-a-raspberry-pi-music-player-with-runeaudio","nextPostTitle":"Create a Raspberry Pi Music Player with RuneAudio","isFeatured":false,"tags":["Angular","Netlify","Identity"]}