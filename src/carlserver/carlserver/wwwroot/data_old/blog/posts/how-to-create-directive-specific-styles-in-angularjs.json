{"id":14,"title":"How To Create Directive Specific Styles In AngularJS","summary":"In this post, I show how to leverage css selectors to make styles specific to an AngularJS controller or directive. The technique seems obvious once it's pointed out but it's something I never thought of until recently. Hopefully this can also help others better organize css in their AngularJS applications.","body":"In this post, I show how to leverage css selectors to make styles specific to an AngularJS controller or directive. The technique seems obvious once it's pointed out but it's something I never thought of until recently. Hopefully this can also help others better organize css in their AngularJS applications.\r\n<br /><br />\r\nWe start with an AngularJS application that is broken down into controllers and directives responsible for different functionality throughout the application. In a big application it can be tricky to setup css selectors that only apply to elements in a specific directive or controller template. You may want a <code class=\"language-html\">&lt;h2&gt;</code> or <code class=\"language-html\">&lt;td&gt;</code> element to be styled differently depending on the page or table it appears in. I've seen this handled in a number of ways. One is to give each template a unique id in it's top level element to distinguish it from other templates. The css ends up looking something like this <code class=\"language-css\">#id.class.div.class.h2</code>.  That is a lot to keep track of and hard to maintain. I've also seen side effects when using this approach, where changing styles to fit one template impacts the layout of another template. That's not good. A better way would be if we could specify our custom styles directly on an element and be sure they will only effect those elements in a specific template. If we're using an element directive, we already have a unique parent element to start with. This allows us to simplify the selector. I setup a simple example <a target=\"_blank\" href=\"https://next.plnkr.co/plunk/ZRNLSbYOJ7Fa3y7k\">in plnkr</a> to demonstrate this.\r\n<br /><br />\r\nFor example, let's say we have an <code class=\"language-html\">h2</code> tag in two different directives that we want styled differently. The first directive's selector is <code class=\"language-html\">&lt;header-monospace&gt;</code> and the second directive's selector is <code class=\"language-html\">&lt;header-italic&gt;</code>. In our css, we can select the individual <code class=\"language-html\">h2</code> from <code class=\"language-html\">&lt;header-monospace&gt;</code> using the selector <code class=\"language-css\">header-monospace h2</code>. Now we can add any styles specific to <code class=\"language-html\">&lt;header-monospace&gt;</code> and are assured those styles will only apply to this directive.\r\n<br /><br />\r\nSimilarly, we can do the same with a controller. Let's say we want to style the <code class=\"language-html\">p</code> tag in a controller. Since a controller is defined with the <code>ng-controller</code> attribute directive, we can use a css attribute selector to narrow our selection to only elements that match the specific attribute like this <code class=\"language-css\">div[ng-controller=\"mainController\"] p</code>. The complete css from the example is below.\r\n<pre>\r\n<code class=\"language-css\">\r\nheader-monospace h2 {\r\n  font-family: monospace;\r\n}\r\n\r\nheader-italic h2 {\r\n  font-style: italic;\r\n}\r\n\r\ndiv[ng-controller=\"mainController\"] p {\r\n  text-decoration: underline;\r\n}\r\n</code>\r\n</pre>\r\n<br />\r\nThat is pretty much it. A simple and effective way to use css selectors to make styling an AngularJS application easier. Look at <a target=\"_blank\" href=\"https://next.plnkr.co/plunk/ZRNLSbYOJ7Fa3y7k\">this plunk</a> to see a complete example with a controller and a couple directives.","author":"Carl Layton","publishedDate":"2019-02-23T06:00:00Z","friendlyUri":"how-to-create-directive-specific-styles-in-angularjs","isPublished":true,"previousPostUri":"create-formatted-text-files-with-csvhelper","previousPostTitle":"Create Formatted Text Files With csvhelper","nextPostUri":"using-netlify-identity-widget-in-an-angular-application","nextPostTitle":"Using Netlify Identity Widget In An Angular Application","tags":["AngularJS","Javascript","CSS","Frontend Dev"]}