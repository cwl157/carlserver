{"id":17,"title":"Use Dropbox for Persistent Storage with an Angular Application","summary":"In this post, I create an Angular application that uses Dropbox for persistent storage. I start with creating a regular Angular app using the Angular CLI and then add Dropbox integration to it. At the end, you will have a working example of Dropbox integration with an Angular app. ","body":"In this post, I show an example of using Dropbox with an Angular application. I'll show how to authenticate to Dropbox with Angular and how to read and write files to Dropbox. This can be used to add persistent storage to the application without needing a custom backend service or API. First, I'll go over the functionality of the app, then show how to create the Angular piece. Finally, I'll detail how to add Dropbox integration. This post requires the <a target=\"_blank\" href=\"https://cli.angular.io/\">Angular CLI</a> and some familiarity with Angular but you don't need to be an expert. <a target=\"_blank\" href=\"https://nodejs.org\">NodeJs and NPM are also required.</a> You must also have a <a target=\"_blank\" href=\"https://www.dropbox.com\">Dropbox</a> account. The free version works. The complete example is <a target=\"_blank\" href=\"https://github.com/cwl157/angular-dropbox\">available on GitHub.</a>\r\n<br /><br />\r\n<h3>Application overview</h3>\r\nWe're going to create an application that allows the user to manage a list of books and use Dropbox for storage. The application performs create, read, and delete operations. It's an angular application with no routing to keep it simple. The top of the page contains a form for entering new Books.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-dropbox-for-persistent-storage-with-an-angular-application/enter-book-form.PNG\" style=\"width:50%;\" />\r\n<br /><br />\r\nThe bottom part of the page displays the list of books with a button to remove a book from the list.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-dropbox-for-persistent-storage-with-an-angular-application/list-books.PNG\" style=\"width:75%;\" />\r\n<br /><br />\r\n<h3>Create the Angular Application</h3>\r\nWe're going to use the Angular CLI to create a new application. If you don't have it installed, <a target=\"_blank\" href=\"https://cli.angular.io/\">click here</a> to download it. Once installed, from a terminal / command line / powershell run <code>ng new</code> to create a new app. The CLI will prompt for a name, I called it 'angular-dropbox' and ask if you would like to include routing. Routing is not required for this project so answer 'N'. Finally, it asks which stylesheet format you want to use, pick CSS (the default). Next run <code>ng serve</code> to verify the basic Angular application is working out of the box.\r\n<br /><br />\r\nTo keep this application simple and the focus on Dropbox integration, I added everything to the main app component. First, add a couple lines to <code>app.component.css</code> to format the table to display books.\r\n<pre>\r\n<code class=\"language-css\">\r\ntable, th, td {\r\n    border: 1px solid black;\r\n}\r\n</code>\r\n</pre>\r\n<br />\r\nNext, we're going to create a regular typescript class to hold the Book data named <code>book.entity.ts</code>.\r\n<pre>\r\n<code class=\"language-typescript\">\r\nexport class BookEntity {\r\n    public Title: string;\r\n    public Author: string;\r\n    public Length: number | null;\r\n    public PublishedDate: Date | null;\r\n\r\n    public Reset(): void {\r\n        this.Title = \"\";\r\n        this.Author = \"\";\r\n        this.Length = null;\r\n        this.PublishedDate = null;\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n<br />\r\nNow it's time to setup the html template. Remove everything from <code>app.component.html</code> and replace it with the template below.This has the form at the top of the page, binding data to the <code>newBook</code> object in the typescript file, which we'll define later. It also loops through a list of books to display in the table.\r\n<pre>\r\n<code class=\"language-html\">\r\n&lt;label for=\"title\"&gt;Title: &lt;/label&gt;&lt;input id=\"title\" type=\"text\" [(ngModel)]=\"newBook.Title\" /&gt;\r\n&lt;br /&gt;&lt;br /&gt;\r\n&lt;label for=\"Author\"&gt;Author: &lt;/label&gt;&lt;input id=\"author\" type=\"text\" [(ngModel)]=\"newBook.Author\" /&gt;\r\n&lt;br /&gt;&lt;br /&gt;\r\n&lt;label for=\"length\"&gt;Length (In Pages): &lt;/label&gt;&lt;input id=\"length\" type=\"number\" min=\"0\" [(ngModel)]=\"newBook.Length\" /&gt;\r\n&lt;br /&gt;&lt;br /&gt;\r\n&lt;label for=\"published\"&gt;Date Published: &lt;/label&gt;&lt;input id=\"published\" type=\"date\" [(ngModel)]=\"newBook.PublishedDate\" /&gt;\r\n&lt;br /&gt;&lt;br /&gt;\r\n&lt;button (click)=\"addBook()\"&gt;Add Book&lt;/button&gt;\r\n\r\n&lt;h1&gt;Books&lt;/h1&gt;\r\n  &lt;table&gt;\r\n&lt;thead&gt;\r\n  &lt;tr&gt;\r\n    &lt;th&gt;Title&lt;/th&gt;\r\n    &lt;th&gt;Author&lt;/th&gt;\r\n    &lt;th&gt;Length (In Pages)&lt;/th&gt;\r\n    &lt;th&gt;Publish Date&lt;/th&gt;\r\n    &lt;th&gt;Delete&lt;/th&gt;\r\n  &lt;/tr&gt;\r\n&lt;/thead&gt;\r\n&lt;tbody&gt;\r\n  &lt;tr *ngFor=\"let book of Books; let i = index\"&gt;\r\n    &lt;td&gt;{{book.Title}}&lt;/td&gt;\r\n    &lt;td&gt;{{book.Author}}&lt;/td&gt;\r\n    &lt;td&gt;{{book.Length}}&lt;/td&gt;\r\n    &lt;td&gt;{{book.PublishedDate}}&lt;/td&gt;\r\n    &lt;td&gt;&lt;button (click)=\"removeBook(i)\"&gt;X&lt;/button&gt;&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/tbody&gt;\r\n&lt;/table&gt;\r\n</code>\r\n</pre>\r\nSince our application binds data using a form, we need to import the <code>FormsModule</code> in <code>app.module.ts</code>. The file looks like this after it's added.\r\n<pre>\r\n<code class=\"language-typescript\">\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule }   from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n</code>\r\n</pre>\r\n<br />\r\nFinally, we need to modify the <code>app.component.ts</code> file. There is a <code>BookEntity</code> object to store the new book being added and an array of <code>BookEntity</code> objects to keep track of the list to display. There are functions to add and remove a book. The <code>Books</code> property is static with a getter function and that is so we can populate it later when we add Dropbox integration. <code>ngOnInit()</code> will be used at that time also.\r\n<pre>\r\n<code class=\"language-typescript\">\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { BookEntity } from './book.entity';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\n\r\nexport class AppComponent implements OnInit {\r\n  newBook: BookEntity;\r\n  static books: BookEntity[];\r\n\r\n  constructor() {\r\n    this.newBook = new BookEntity;\r\n    AppComponent.books = [];\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Load dropbox data here...\r\n  }\r\n\r\n  get Books():BookEntity[] {\r\n    return AppComponent.books;\r\n  }\r\n\r\n  public addBook() {\r\n    let b: BookEntity = new BookEntity;\r\n    b.Title = this.newBook.Title\r\n    b.Author = this.newBook.Author;\r\n    b.Length = this.newBook.Length;\r\n    b.PublishedDate = this.newBook.PublishedDate;\r\n    AppComponent.books.push(b);\r\n\r\n    \r\n    this.newBook.Reset();\r\n  }\r\n\r\n  public removeBook(i) {\r\n     AppComponent.books.splice(i, 1);\r\n    \r\n  }\r\n}\r\n</code>\r\n</pre>\r\n<br />\r\nAt this point, we have a working angular application that allows us to add and remove books. Run <code>ng serve</code> to test it. Next, we'll add Dropbox to persist the list of books.\r\n<br /><br />\r\n<h3>Dropbox Integration</h3>\r\nThe first step is to add our application to Dropbox. Login to Dropbox and go to the <a target=\"_blank\" href=\"https://www.dropbox.com/developers/apps\">Dropbox App Console.</a> Click Create app in the upper right corner. Under step 1 choose \"dropbox API\", step 2 choose the first option, App folderâ€“ Access to a single folder created specifically for your app. This means the application only has access to a specific folder in Dropbox, not all of Dropbox. This works better for our app because it allows us to store all the app data in 1 place and is more secure because our app can't access all of the user's files in Dropbox. Finally, give the app a name.\r\n<br /><br />\r\nOnce the app is created, we need to configure the OAuth2 settings to allow us to connect from the Dropbox Javascript API. Enter a redirect url to localhost and make sure the port matches the port the angular application is running on. By default, the Angular CLI uses port <code>4200</code>. Also, make sure \"Allow implicit grant\" is set to \"Allow\". Below are some sample settings.\r\n<br />\r\n<img src=\"/data/blog/posts/img/use-dropbox-for-persistent-storage-with-an-angular-application/oauth-setup.PNG\" style=\"width:100%;\" />\r\n<br /><br />\r\nThe second step is to get the Dropbox Javascript SDK and include it in the project. I made a local copy of it from the <a target=\"_blank\" href=\"https://github.com/dropbox/dropbox-sdk-js/tree/master/examples\">Dropbox Javascript SDK examples</a> on GitHub. It's also included in the <a target=\"_blank\" href=\"https://github.com/cwl157/angular-dropbox\">GitHub repo</a> for this project. You need to add it to the build scripts in the <code>angular.json</code> file.\r\n<pre>\r\n<code>\r\n\"build\": {\r\n          \"builder\": \"@angular-devkit/build-angular:browser\",\r\n          \"options\": {\r\n            \"outputPath\": \"dist/angular-dropbox\",\r\n            \"index\": \"src/index.html\",\r\n            \"main\": \"src/main.ts\",\r\n            \"polyfills\": \"src/polyfills.ts\",\r\n            \"tsConfig\": \"src/tsconfig.app.json\",\r\n            \"assets\": [\r\n              \"src/favicon.ico\",\r\n              \"src/assets\"\r\n            ],\r\n            \"styles\": [\r\n              \"src/styles.css\"\r\n            ],\r\n            \"scripts\": [\r\n              \"src/Dropbox-sdk.min.js\"\r\n            ],\r\n            \"es5BrowserSupport\": true\r\n          }\r\n</code>\r\n</pre>\r\n<br />\r\nStop and restart <code>ng serve</code>. To test if the SDK was loaded, open the developer tools in the browser and type <code>Dropbox</code> in the console. If a function is returned, the Dropbox Javascript SDK has been loaded. If undefined is returned, Angular is not including the Dropbox SDK in the build / serve.\r\n<br /><br />\r\nNext, we're going to add the ability to authenticate to Dropbox. This requires adding a link to login to Dropbox and then be returned to the app with an authentication token returned in the query string. This authentication token let's us make API requests to Dropbox. If this were a server-side app, we could store this authentication token for future use but since this application is entirely client-side, I'm only storing the token in memory in a local variable in the app component. This means the user needs to re-authenticate to Dropbox each time they navigate to the app. If the application had multiple components we could store this token in an Angular service when the app is initialized to share it across components. Since this app is entirely client-side in the browser, this is the most secure way to manage the authentication token.\r\n<br /><br />\r\nThere are a couple utility functions I took from the <a target=\"_blank\" href=\"https://github.com/dropbox/dropbox-sdk-js/tree/master/examples/javascript\">Dropbox examples on GitHub</a> that parses the auth token out of the query string. These are in Javascript in the examples so I converted them to typescript so I can import them into the <code>app.component.ts</code> file. I added them to a file called <code>utils.ts</code> which is shown below.\r\n<pre>\r\n<code class=\"language-typescript\">\r\n/* This functions below are from the Dropbox SDK examples to retreive the auth token from the query string */\r\nexport class Utils {\r\n\r\n    private static parseQueryString(str: string): Object {\r\n        var ret: {[k: string]: string[] | string} = Object.create(null);\r\n      \r\n        if (typeof str !== 'string') {\r\n          return ret;\r\n        }\r\n      \r\n        str = str.trim().replace(/^(\\?|#|&)/, '');\r\n      \r\n        if (!str) {\r\n          return ret;\r\n        }\r\n      \r\n        str.split('&').forEach(function (param) {\r\n          var parts = param.replace(/\\+/g, ' ').split('=');\r\n          // Firefox (pre 40) decodes `%3D` to `=`\r\n          // https://github.com/sindresorhus/query-string/pull/37\r\n          var key = parts.shift();\r\n          var val = parts.length &gt; 0 ? parts.join('=') : undefined;\r\n      \r\n          key = decodeURIComponent(key);\r\n      \r\n          // missing `=` should be `null`:\r\n          // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\r\n          val = val === undefined ? null : decodeURIComponent(val);\r\n      \r\n          var retVal = ret[key];\r\n          if (ret[key] === undefined) {\r\n            ret[key] = val;\r\n          } else if (Array.isArray(retVal)) {\r\n            retVal.push(val);\r\n          } else {\r\n            ret[key] = [&lt;string&gt; ret[key], val];\r\n          }\r\n        });\r\n      \r\n        return ret;\r\n      }\r\n\r\n// Parses the url and gets the access token if it is in the urls hash\r\npublic static getAccessTokenFromUrl(): string {\r\n    return &lt;string&gt; Utils.parseQueryString(window.location.hash)['access_token'];\r\n  }\r\n}\r\n</code>\r\n</pre>\r\n<br />\r\nIn <code>app.component.html</code> add the following to the top of the template. This adds a link to connect to Dropbox if we're not currently connected, or displays \"Conncted to dropbox\" if we are connected. I also included an optional \"Loading...\" text that will display while we retrieve existing books from Dropbox. \r\n<pre>\r\n<code class=\"language-html\">\r\n&lt;a href=\"{{authUrl}}\" [hidden]=\"isAuthenticated\"&gt;Connect to Dropbox&lt;/a&gt;\r\n&lt;p [hidden]=\"!isAuthenticated\"&gt;Connected to dropbox&lt;/p&gt;\r\n&lt;p [hidden]=\"!IsLoading\"&gt;Loading...&lt;/p&gt;\r\n</code>\r\n</pre>\r\n<br />\r\nWhen the application loads, we use the functions we added to <code>utils.ts</code> to pull the auth token out of the query string, if it exists. If it does exist, we assume we're connected to Dropbox. To do this, import utils into <code>app.component.ts</code> by adding this line to the top of the file. <code class=\"language-typescript\">import { Utils } from './utils';</code>. Directly under the import statements, add <code class=\"language-typescript\">declare var Dropbox: any;</code> to use the global Dropbox object from the Dropbox \r\nJavascript SDK.\r\n<br /><br />\r\nThen add the following local variables to <code>app.component.ts</code>.\r\n<pre>\r\n<code class=\"language-typescript\">\r\nCLIENT_ID: string = // App key from Dropbox;\r\nFILE_NAME: string = \"/BookList.txt\"; // Or whatever you want the file to be named where the data is stored\r\nauthUrl: string;\r\ndropboxToken: string\r\nisAuthenticated: boolean\r\nstatic isLoading: boolean;\r\n</code>\r\n</pre>\r\n<br />\r\nThis is what the new constructor looks like. We initialize our new variables and use the Dropbox API to setup the authentication url. Then we try to pull an existing auth token out of the url to see if we're currently authenticated or not.\r\n<pre>\r\n<code class=\"language-typescript\">\r\nconstructor() {\r\n    this.isAuthenticated = false;\r\n    this.newBook = new BookEntity;\r\n    AppComponent.books = [];\r\n    AppComponent.isLoading = false;\r\n\r\n    var dbx = new Dropbox({ clientId: this.CLIENT_ID });\r\n    this.authUrl = dbx.getAuthenticationUrl('http://localhost:4200/auth');\r\n    \r\n    this.dropboxToken = Utils.getAccessTokenFromUrl();\r\n    this.isAuthenticated = this.dropboxToken !== undefined;\r\n  }\r\n</code>\r\n</pre>\r\n<br /><br />\r\nThe next step is to preload the book list if there is an auth token available when the application loads. We do this in the <code>ngOnInit()</code> function. We store the books data as JSON in the text file in Dropbox. This uses the Dropbox API to download the file and then parse the JSON contents into the <code>books</code> array. There is a slight delay while this happens so I use the <code>AppComponent.isLoading</code> flag as a simple way to notify the user that the books are loading. I made it static because it needs to be accessed from within the inner scope of the file reader callback and the outer scope of the component, similar to the <code>AppComponent.books</code> property. They also need to be available to the template so there are getters to make them available as instance variables. Below is the full code for the <code>ngOnInit</code> function and the <code>AppComponent.isLoading()</code> getter function.\r\n<pre>\r\n<code class=\"language-typescript\">\r\n ngOnInit() {\r\n    if (this.dropboxToken !== undefined) {\r\n    var dbx = new Dropbox({ accessToken: this.dropboxToken });\r\n    AppComponent.isLoading = true;\r\n    dbx.filesDownload({path:  this.FILE_NAME}).then(function(response) {\r\n    let reader = new FileReader();\r\n    let blob: Blob = response.fileBlob;\r\n\t\t\t\t\treader.addEventListener(\"loadend\", function(e) {\r\n            AppComponent.books = JSON.parse(&lt;string&gt;reader.result);\r\n            AppComponent.isLoading = false;\r\n          });\r\n         reader.readAsText(blob);\r\n    })\r\n    .catch(function(error: any) {\r\n      AppComponent.isLoading = false;\r\n    });\r\n  }\r\n }\r\n\r\n  get IsLoading():boolean {\r\n    return AppComponent.isLoading;\r\n  }\r\n</code>\r\n</pre>\r\n<br />\r\nThe final step is to add a function to convert the <code>AppComponent.books</code> list into JSON text, add it to the file and send the file to Dropbox. When a new book is added or removed, I create the entire JSON string for the whole updated book list and add it to the file. The function for that is below.\r\n<pre>\r\n<code class=\"language-typescript\">\r\nprivate saveToDropbox() {\r\n    var dbx = new Dropbox({ accessToken: this.dropboxToken });\r\n    dbx.filesUpload({contents:JSON.stringify(AppComponent.books), path: this.FILE_NAME, mode: {\".tag\": 'overwrite'}, autorename: false, mute: true }).then(function(response) {\r\n    }).catch(function(error) {\r\n      // If it errors because of a dropbox problem, reload the page so the user can re-connect to dropbox\t\r\n      alert(\"Failed to save to dropbox\");\r\n      console.log(JSON.stringify(error));\r\n      window.location.href = '/';\r\n    });\r\n  }\r\n</code>\r\n</pre>\r\nThe only thing left is to call this function at the end of <code>addBook()</code> and <code>removeBook()</code> to save the new book list to Dropbox.\r\n<br /><br />\r\n<h3>Conclusion</h3>\r\nIf you made it this far, you should have an Angular application that persists it's data to Dropbox. Congratulations! Over this journey, we created an Angular application to add and remove books from a list and persist that list of books to Dropbox. We configured our app to connect to Dropbox using OAuth authentication. We manage the auth token in a completely client-side way and use the Dropbox API to read and write a file to Dropbox. The complete example is also <a target=\"_blank\" href=\"https://github.com/cwl157/angular-dropbox\">available on GitHub.</a>","author":"Carl Layton","publishedDate":"2019-10-11T01:30:00Z","friendlyUri":"use-dropbox-for-persistent-storage-with-an-angular-application","isPublished":true,"previousPostUri":"create-a-raspberry-pi-music-player-with-runeaudio","previousPostTitle":"Create a Raspberry Pi Music Player with RuneAudio","nextPostUri":"the-outbox-pattern-in-csharp","nextPostTitle":"The Outbox Pattern in C#","isFeatured":true,"tags":["Angular","Javascript","Dropbox"]}