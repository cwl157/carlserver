{"id":18,"title":"The Outbox Pattern in C#","summary":"In this post, I explain the outbox pattern and implement an example in C#. The outbox pattern can be used when one business transaction needs to happen as a result of another business transaction but it's not possible to combine them into the same database transaction. The example contains two applications. The first allows a user to add titles and authors of books. After a new book is added, a row is created in the outbox. The second application processes the entries in the outbox. The example requires .NET Core 2.1 and SQL Server 2017 express.","body":"This post is part of <a href=\"https://crosscuttingconcerns.com/The-Third-Annual-csharp-Advent\">the third annual C# Advent</a>. Be sure to check out the other great posts as well. In this post, I'm going to implement the outbox pattern in C#. The outbox pattern can be used when one business transaction needs to happen as a result of another business transaction but it's not possible to combine them into the same database transaction. An example is when an order is placed through an online ordering system and an independent fulfillment system needs to be notified so the purchased items can be packaged and shipped. The outbox pattern can ensure the fulfillment system is updated correctly. When the order is placed, the online ordering system is updated, and at the same time, a message is placed into an outbox. A separate process comes along and processes any waiting entries in the outbox. This allows the outbox entry to be created at the same time the online ordering system is updated. It's important to note that it's possible for the outbox to process the message but then fail to update the outbox row. This means the row can be processed more than once. In a real application, the outbox processor or destination should account for this scenario.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/the-outbox-pattern-in-csharp/outbox_pattern_a.png\" alt-text=\"outbox pattern diagram\" width=\"50%\" height=\"50%\" />\r\n<br /><br />\r\n<h3>The Example Application</h3>\r\nFor this example, I created two console applications. The first lets the user add titles and authors of their favorite books. When a new book is added, an entry is added to the outbox. The second app processes the outbox. The books and outbox are stored in a SQL database. Since there are a lot of moving parts, I won't be going over every line of code here. The full example is <a target=\"_blank\" href=\"https://github.com/cwl157/outbox-pattern-example\">available on GitHub</a>. It requires .NET Core 2.1 and SQL Server 2017 express.\r\n<br /><br />\r\n<h3>Database Setup</h3>\r\nThe database consists of two tables. One to store the books and one to store the outbox. There are also some stored procedures for getting and setting data in the tables. Below are the table definitions. The <a target=\"_blank\" href=\"https://github.com/cwl157/outbox-pattern-example\">GitHub repository</a> contains a complete create script for all database objects.\r\n<pre>\r\n<code class=\"language-sql\">\r\nCREATE TABLE [dbo].[Outbox](\r\n\t[OutboxId] [int] IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED([OutboxId] ASC),\r\n\t[RequestMessage] [nvarchar](max) NOT NULL,\r\n\t[QueuedDate] [datetime] NOT NULL DEFAULT (getdate()),\r\n\t[ProcessedDate] [datetime] NULL,\r\n\t[ProcessedStatus] [nvarchar](256) NOT NULL DEFAULT ('queued'),\r\n\t[ErrorMessage] [nvarchar](max) NULL\r\n )\r\n GO\r\n\r\nCREATE TABLE [dbo].[Book] (\r\n\t[BookId] [int] IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED([BookId] ASC),\r\n\t[Title] [nvarchar](512) NOT NULL,\r\n\t[Author] [nvarchar](512) NOT NULL\r\n)\r\nGO\r\n</code>\r\n</pre>\r\n<br />\r\n<h3>Adding a Book</h3>\r\nThe book manager has 3 options, add a new book, load books from the database, and display all books that are currently loaded in the application. After creating a book, a row is added to the outbox as shown below.\r\n<br /> <br />\r\n<img src=\"/data/blog/posts/img/the-outbox-pattern-in-csharp/book_manager.PNG\" alt-text=\"book manager\" width=\"50%\" height=\"50%\" style=\"padding-right: 10px;\" />\r\n<img src=\"/data/blog/posts/img/the-outbox-pattern-in-csharp/book_saved.PNG\" alt-text=\"book manager\" width=\"50%\" height=\"50%\" style=\"float: right;\" />\r\n<img src=\"/data/blog/posts/img/the-outbox-pattern-in-csharp/queued_outbox_entry.PNG\" alt-text=\"book manager\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\nBelow is the code that adds a new book. Notice I add the book and outbox row as part of the same database transaction. This could also be done in the same SQL stored procedure but I'm assuming mostly C# programmers are reading this so I did the database transaction in C#.\r\n<pre>\r\n<code class=\"language-csharp\">\r\npublic static void SaveBook(Book book)\r\n{\r\n    using (var connection = new SqlConnection(ConnectionString))\r\n    {\r\n        using (var command = connection.CreateCommand())\r\n        {\r\n            command.CommandType = CommandType.StoredProcedure;\r\n            connection.Open();\r\n            command.Transaction = command.Connection.BeginTransaction();\r\n            command.CommandText = \"SaveBook\";\r\n            command.Parameters.AddWithValue(\"@Title\", book.Title);\r\n            command.Parameters.AddWithValue(\"@Author\", book.Author);\r\n            command.ExecuteNonQuery();\r\n\r\n            command.CommandText = \"InsertOutbox\";\r\n            command.Parameters.Clear();\r\n            command.Parameters.AddWithValue(\"@RequestMessage\", book.Title + \",\" + book.Author);\r\n            command.ExecuteNonQuery();\r\n\r\n            command.Transaction.Commit();\r\n        }\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n<br />\r\n<h3>Processing the Outbox</h3>\r\nThe second application has one option to process the outbox. In this case \"processing the outbox\" simply means displaying the message to the console. The row in the outbox table gets updated with a timestamp of when the row was processed and a status of 'processed'.\r\n<br /><br />\r\n<img src=\"/data/blog/posts/img/the-outbox-pattern-in-csharp/outbox_processor.PNG\" alt-text=\"strategy pattern diagram\" width=\"50%\" height=\"50%\" style=\"padding-right: 10px;\" />\r\n<img src=\"/data/blog/posts/img/the-outbox-pattern-in-csharp/outbox_processed.PNG\" alt-text=\"strategy pattern diagram\" width=\"50%\" height=\"50%\" style=\"float: right;\" />\r\n<img src=\"/data/blog/posts/img/the-outbox-pattern-in-csharp/processed_outbox.PNG\" alt-text=\"book manager\" width=\"100%\" height=\"100%\" />\r\n<br /><br />\r\n<h3>Conclusion</h3>\r\n<br />\r\nIn conclusion, this is a simplified example of the outbox pattern in C#. The outbox pattern can be used when one business transaction needs to happen as a result of another business transaction but it's not possible to combine them into the same database transaction. In this post, I showed how adding a book, adds an entry to the outbox which can be handled by a separate process. Check out <a target=\"_blank\" href=\"https://github.com/cwl157/outbox-pattern-example\">the full example on GitHub</a>. You can run both apps side by side and insert books in one, and process them in the other. Finally, head over to <a href=\"https://crosscuttingconcerns.com/The-Third-Annual-csharp-Advent\">this year's C# Advent</a> for the other great posts.","author":"Carl Layton","publishedDate":"2019-12-04T06:00:00Z","friendlyUri":"the-outbox-pattern-in-csharp","isPublished":true,"previousPostUri":"use-dropbox-for-persistent-storage-with-an-angular-application","previousPostTitle":"Use Dropbox for Persistent Storage with an Angular Application","nextPostUri":"create-custom-password-hasher-for-aspnet-core-identity-v3-update","nextPostTitle":"Create Custom Password Hasher for ASP .NET Core Identity - .NET Core 3 Update","isFeatured":true,"tags":["csharp","Design patterns","Outbox Pattern"]}